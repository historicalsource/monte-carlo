	.TITLE	MONTE - MONTE CARLO/SUPERBUG II RACER
	.SBTTL	**************************************************
	.SBTTL	*
	.SBTTL	* PROGRAMMER: STEVE CALFEE AND NORM AVELLAR 
	.SBTTL	*
	.SBTTL	* CHECKER:
	.SBTTL	*
	.SBTTL	**************************************************
	.REPT	0

DATE INITATED:		21-SEP-79 
PROJECT CHARGE #:	23003 
DISK #:			61 & B20


HARDWARE REQUIREMENTS: 

	FIRETRUCK MODIFIED FOR COLOR

MEMORY REQUIREMENTS:



	64	BYTES ALPHANUMERICS RAM
	192	BYTES WORKING RAM
	256	BYTES PLAYFIELD RAM
	4K	BYTES TRACK MAPS, CELLS, MOLECULES
	4K	BYTES PROGRAM

INTERRUPT REQUIREMENTS:

	4 IRQ'S PER FRAME
	NMI OCCURRS AT VBLANK

ASSEMBLY COMMAND STRING:

	DK1:MONACO.TMP=MONACO/A/C

LINK COMMAND STRING:	 
	PP:/L,DK1:MONACO/A=MONACO,MONAUT,MOCOIN,MO2TST

PROGRAM DESCRIPTION:

	RACING THEME SUPERBUG WITH TRAFFIC, FOUR GEAR SHIFTER
	AND IN COLOR

	.ENDR
	.PAGE
	.SBTTL	GLOBAL VARIABLES
;
;EXTERNALLY ACCESSED VARIABLES
;
	.GLOBL	VPOS,HPOS,DRGOAL,HPOSL,VPOSL
	.GLOBL	MAPPT,TEMP,XTEMP,STEMP
	.GLOBL	ROTATE,FRAME,VEL,HINC,VINC
	.GLOBL	XINDEX,DVISBL,DCOLOR,DIREC
	.GLOBL	MODE,POSNOW,POSLAST,VEL,STAT,DSKDCT
	.GLOBL	SVPOS,SHPOS,DCOLOR
	.GLOBL $$CRDT,$PSTSL,$LMTIM,$LMBIT
	.GLOBL $INTCT,$COINA,$CNCT,$CMODE
	.GLOBL $CCTIM,$LAM,$CNSTT
	.GLOBL WTCHDG,PLYFLD,AN,ROM1
	.GLOBL TSTCNT,TRKLED,SWITCH,PVP,PHP
	.GLOBL CRSSND,SKDSND,SKDRST,CARROT
	.GLOBL DHPOS,DVPOS,DROT,MSND1,VBLANK
	.GLOBL TESTSW,DIHOLD,STEPSW,ROTTAB,VISAVE
	.GLOBL VIDINV,ATTRCT,STEPDB,OPTS
	.GLOBL RAMCV,RAMCHK,ATSTART
	.GLOBL MAINLP,ISTEMP,ATSAVE,EMCNTRS
;
;EXTERNALLY ACCESSED ROUTINES
;
	.GLOBL	PTSTAMP,INDEX
;
;EXTERNAL ROUTINE ENTRY POINTS
;
	.GLOBL	PWRON,IRQ,NMI
	.GLOBL	AUTO,STDRN
	.GLOBL	TEST,TSTRTN,COIN68
	.ASECT
	.SBTTL	ZERO PAGE RAM
	.RADIX	16
	.=0000
AN:	.BLKB	40		;ALPHANUMERICS RAM

FUEMSD	=AN+2A
FUELSD	=FUEMSD+1
SCRMSD	=AN+22
SCRLSD	=SCRMSD+1
BFMSD	=AN+33
BFLSD	=BFMSD+1
HISMSD	=AN+13
HISLSD	=HISMSD+1
SPDMSD	=AN+31
TRKLOC	=AN+3A
HLINE:	.BLKB	16.		;EDGE OF SCREEN ARRAYS
VLINE:	.BLKB	16.
	;INDEXED VARIABLES
ROTATE:	.BLKB	2		;0 TO 23 LOGICAL ROTATIONS
ROTOUT:	.BLKB	2		;OUTPUT ROTATION #
DIREC:	.BLKB	2		;DIRECTION CAR IS MOVING
VEL:	.BLKB	2		;VELOCITY OF CAR
;
;THE NEXT 12. BYTES MUST BE IN THIS ORDER
;
HPOS:	.BLKB	2		;HORIZ POSITION OF CARS (HI BYTE)
HPOSL:	.BLKB	2		;	"	"	"     (LO BYTE)
VPOS:	.BLKB	2		;VERT POSITION OF CARS (HI BYTE)
VPOSL:	.BLKB	2		;	"	"	(LO BYTE)
HINC:	.BLKB	2
VINC:	.BLKB	2
GEAR:	.BLKB	2		;GEAR # OF CARS
STAT:	.BLKB 	2		;BIT7-STEERING, BIT3-SQUISHY, BIT2-SCRATCH, BIT1-CRASH
				;BIT0-SKID


	;END OF INDEXED VARIABLES
XINDEX:	.BLKB	2		;CAR INDEX
				;X=0=PLAYER CAR
				;X=1 OR >=DRONE(S)
XTEMP:	.BLKB	2		;X REGISTER TEMP
STEMP:	.BLKB	2		;STACK POINTER TEMP
TEMP:	.BLKB	2		;TEMP VARIABLE
DRGOAL:	.BLKB	1		;DRONE ROTATION GOAL
XTDSCR:	.BLKB	1		;SCORE NEEDED FOR EXTENDED PLAY
FUELTM:	.BLKB	1		;TIMER FOR DECRAMENTING FUEL
FUEL:	.BLKB	1		;FUEL LEFT
CRSCNT:	.BLKB	1		;COUNTER FOR CRASH
CRSTIM:	.BLKB	2		;LOCKOUT TIMER FOR CRASH
SPNFLG:	.BLKB	1
SPNCNT:	.BLKB	1
SPNROT:	.BLKB	1
MULT0:	.BLKB	1		;MULTIPLY VARIABLES
MULT1:	.BLKB	1
MULT2:	.BLKB	1
MULT3:	.BLKB	1
SCRCNT:	.BLKB 	1		;COUNTER USED TO KEEP TRACK OF SCORING CHECKPOINTS
ANPNT:	.BLKB 	2		;ALPHA/NUMERICS POINTER
SOUNDS:	.BLKB	1
DRONEV:	.BLKB	2
DRONEH:	.BLKB	2
DVISBL:	.BLKB	1
POSNOW:	.BLKB	1		;4 BYTE ARRAY
POSLAST:.BLKB	7		;4 BYTE ARRAY
ARROW:	.BLKB	1		;0=NO ARROW FOR THIS CELL
BEEP:	.BLKB	1		;TIMER FOR EXTENDED PLAY SOUND
DCOLOR:	.BLKB	1		;DRONE COLOR
ACECMP:	.BLKB	1
GOODCMP:.BLKB	1
SOCMP:	.BLKB	1
DSKDCT:	.BLKB	1		;DRONE SKID
FRAME:	.BLKB	1		;FRAME COUNTER
RSTTIM:	.BLKB	1		;ATTRACT RESET TIMER
	N=.-1			;LIMIT FOR INIT


ATSAVE:	.BLKB 	1		;SAVE WORD FOR ATTRACT WORD OUTPUT
VISAVE:	.BLKB	1		;SAVE WORD FOR VIDINV WORD OUTPUT
TMESAV:	.BLKB	1		;RESET VALUE FOR FUELTM
SCOR:	.BLKB	1		;PLAYERS SCORE
CRSHSV:	.BLKB	1		;CRASH SOUND SAVE REGISTER
MODE:	.BLKB	1		;-=GAME;0=ATTRACT;BIT 3=XTENDED PLAY
FREEZE:	.BLKB	1
IXTEMP:	.BLKB	2		;INTERRUPT'S X REGISTER TEMP
ISTEMP:	.BLKB	2		;INTERRUPT'S STACK POINTER TEMP
TSTCNT:
TRKN:	.BLKB	1		;TRACK # BEING USED (0-7)
TRAKS:	.BLKB	1		;USED FOR SELECTING TRACKS
STEPDB:
TKSWDB:	.BLKB	1		;DEBOUNCE
HISCR:	.BLKB	8		;HI SCORE SINCE POWER ON FOR EACH TRACK
MECHS	=3			;COIN VARIABLES
EMCTRS	=3
$$CRDT:	.BLKB 	1
$CMODE:	.BLKB 	1
$CCTIM:	.BLKB	EMCTRS
$LMTIM:	.BLKB	1
$CNCT:	.BLKB	1
$PSTSL:	.BLKB	MECHS
$CNSTT:	.BLKB	MECHS
$LAM	=1801
$LMBIT	=80
$COINA	=1803
$INTCT:	.BLKB	1		;INTERUPT COUNTER FOR COINS
;
;SCROLL FIELD VARABLES
;
HRAMPT:	.BLKB 	2		;HLINE OUTPUT PTR
VRAMPT:	.BLKB	2		;VLINE OUTPUT PTR
THPOS:	.BLKB	2		;PTR FOR FILLING HLINE
TVPOS:	.BLKB	2		;PTR FOR FILLING VLINE
SHPOS:	.BLKB	2		;SCREEN TOP, LEFT COORD
SVPOS:	.BLKB	2		;SCREEN TOP, LEFT COORD
SHPNT:	.BLKB	1		;HPOS OR HPOS + 0F
SVPNT:	.BLKB	1		;VPOS OR VPOS + 0F
SHOUT:	.BLKB	1		;HORZ SCREEN OUTPUT BYTE
SVOUT:	.BLKB	1		;VERT SCREEN OUTPUT BYTE
MAPPT:	.BLKB 	2		;PTR TO CELL IN MAP
STAMPT:	.BLKB	2		;PTR TO STAMP IN CELL

RAMCHK:	.BLKB	2		;TOP OF VARIABLES, STACK PROTECTION

	.SBTTL	 EQUATES
CARPIC	=81
BLPIC	=1E
CELTBL	=2000
MAPTBL	=2900
ATTRK	=8
PLYFLD	=800
ROM1	=2000

PVP	=1000			;PLAYFIELD POSITION
PHP	=1020
DCRST	=1040			;DRONE CRASH RESET
CCRST	=1060			;CAR CRASH RESET
CARROT	=1080			;CAR ROTATION, REGISTER
DCOL2	=1080			;DRONE COLOR2 (BIT 7)
STRRST	=10A0			;STEERING RESET
WTCHDG	=10C0			;WATCHDOG
SKDRST	=10E0			;SKID RESET
MSND1	=1400			;MOTOR SOUND 1 (LO 4 BITS)  CAR
MSND2	=1400			;MOTOR SOUND 2 (HI 4 BITS)  DRONE
CRSSND	=1420			;CRASH SOUND (HI 4 BITS)
SKDSND	=1440			;SKID SOUND ON
DHPOS	=1460			;DRONE HORIZ POS.
DVPOS	=1480			;DRONE VERT POS.
DROT	=14A0			;DRONE ROTATION (LO 5)
DCOL1	=14A0			;DRONE COLOR1 (BIT 7)
EMCNTR	=14C0			;HI 3 BITS (LEFT,CENTER,RIGHT)
ATTRCT	=14C0			;BIT 2  1=SOUND
TRKLED	=14C0			;BIT 1 0=ON
STRLED	=14C0			;BIT 0
MOTZEN	=14E0			;BIT 0, 0=ON
VIDINV	=14E0			;BIT 1, 1=INVERT
EXPSND	=14E0			;BIT 3, 0=ON

;FOR ALL SWITCHES, 1=ON, 0=OFF

SWITCH	=1800			;STARTING ADDRESS OF SWITCHES
STRTSW	=1800			;BIT 7 START
STEPSW	=STRTSW
GEAR1	=1800			;BIT 6 FIRST GEAR
DIHOLD	=GEAR1
CCRASH	=1800			;BIT 1 CAR CRASH INPUT
DCRASH	=1800			;BIT 0 DRONE CRASH INPUT
SLAMSW	=1801			;BIT 7 SLAM SWITCH
GEAR2	=1801			;BIT 6 SECOND GEAR
TESTSW	=1802			;BIT 7 SELF TEST
GEAR3	=1802			;BIT 6 THIRD GEAR
LCOIN	=1803			;BIT 7 LEFT COIN SW
TKSEL	=1803			;BIT 6 TRACK SELECT SW
MCOIN	=1804			;BIT 7 MIDDLE COIN
GASSW	=1804			;BIT 6 GAS PEDAL
RCOIN	=1805			;BIT 7 RIGHT COIN
VBLANK	=1805			;BIT 6 VBLANK
STRFLG	=1806			;BIT 7 STEER FLAG
STRDIR	=1806			;BIT 6 STEER DIRECTION
CSQSH	=1807			;BIT 7 CAR SQUISHY BIT
DSQSH	=1807			;BIT 6 DRONE SQUISHY BIT

OPTS	=1C00
RMECHM	=1C00			;COIN RIGHT MECH MULTIPLY BITS 2,3
MMECHM	=1C00			;MIDDLE MECH OPT BIT 4

SPARE	=1C00			;SPARE BIT 5
;COINOP	BIT 0 OF 1C03,1C02
;XPLYOP	BIT 0 OF 1C01,1C00
;TIMEOP	BIT 1 OF 1C03,1C02
;LANGOP	BIT 1 OF 1C01,1C00
RAMCV	=0AA55			;RAM VALIDATION VALUE
	.=2B08
	JMP	PWRON		;COLD START
	.PAGE
	.SBTTL	MAIN LOOP
	.REPT	0
********************
*
*	MAIN LOOP
*
********************

DESCRIPTION:	SETS UP CAR PROCESSING, CALL ALL MODULES, ETC.


REGISTERS:
	IN:

	OUT:

STACK USE:	2 BYTES FOR SUBROUTINE CALLS


BASE PAGE USE:	MODIFY:	XINDEX
		READ:	MODE,FRAME

	.ENDR
;
;MONACO MAIN PROCESSING LOOP
;
MAINLP:	LDX	I,0		;1=DRONE 0=PLAYER
	STX	D,XINDEX
	CLI
	LDAA	D,STAT
	ANDA	I,5		;SKID OR SCRATCH
	BNE	CARLP
	STAA	E,SKDRST

;PROCESS EACH CAR
;
CARLP:	LDX	D,XINDEX	;GET CAR NUMBER/INDEX
	LDAA	D,MODE
	BPL	40$		;GAME MODE IF MINUS
;
;GAME MODE CAR PROCESSING
;
	JSR	STEER		;UPDATE DIRECTION, ROTATION
	JSR	CRASH		;CHECK FOR WALL COLLISIONS
	JSR	SOUND		;MOTOR SOUNDS
;
;ATTRACT AND GAME CAR PROCESSING
;
40$:	JSR	DIRECT		;DO SKIDS
	JSR	POSITION	;MOVE THE CAR
	JSR	AUTO		;CONTROL DRONE
	LDAA	D,XINDEX+1	;GET INDEX
	BNE	45$		;DONE
	JSR	SCROLL		;BUILD SCREEN
	JSR	SHVUPD
	INC	E,XINDEX+1	;GO TO NEXT CAR
	BRA	CARLP
45$:
;
;NON-CAR PROCESSING
;
	LDAA	D,MODE
	BMI	50$		;GAME MODE
	JSR	ATTRACT
	BRA	60$
50$:	JSR	COLLIDE		;SKIDS, CAR TO CAR COLLISIONS
	JSR	ACCEL		;ACCELERATE PLAYERS CAR
	JSR	SCORE		;TEST FOR CHECKPOINTS
;
;MAINTAIN GAME TIMER
;SEQUENCE FROM GAME TO ATTRACT TO GAME
;
60$:	JSR	TIME
;
;WAIT FOR VBLANK
;
	LDAA	D,FRAME
80$:	WAI			;WAIT FOR AN NMI
	STAA	E,WTCHDG
	ROL	E,TESTSW
	BCC	90$
	JMP	PWRON
90$:	CMPA	D,FRAME
	BEQ	80$		;NOT THE NMI YET
	BRA	MAINLP
	.PAGE
	.SBTTL	ATTRACT
ATSTART:
	CLR	E,MODE		;SET TO ATTRACT MODE
	LDAA	I,10		;NO SOUND
	STAA	D,VISAVE
	LDAA	I,ATTRK		;SET TO ATTRACT MAP
	STAA	D,TRKN
	JSR	INIT		;INITIALIZE
	CLR	E,FRAME
	LDAA	D,SCOR		;CHECK FOR HISCORE
	CLR	E,TEMP
	LDAB	D,TRAKS
	STAB	D,TEMP+1
	LDX	D,TEMP
	CMPA	X,HISCR		;IS SCORE > HISCORE?
	BLS	30$		;NO
	STAA	X,HISCR		;YES
30$:	JMP	SCORIT		;"SCORE" AND RETURN VIA IT
ATTRACT:
;AT 4 MIN INTERVAL RESET ATTRACT
	LDAA	D,FRAME
	ANDA	I,6F
	BNE	5$
	LDAA	D,RSTTIM
	INCA
	STAA	D,RSTTIM
	BEQ	ATSTART
	CMPA	I,30.
	BNE	5$
	JSR	TRKSL0		;RESET TO EASY TRACK
5$:	LDAA	D,ATSAVE	;TURN SOUNDS OFF
	LDAB	D,$$CRDT	;AND BLINK TRACK SELECT LED IF CREDIT
	BEQ	10$
	LDAB	D,FRAME
	ANDB	I,7
	BNE	10$
	EORA	I,2
	ANDA	I,0FE		;START LED IS JUST ON
10$:	ANDA	I,0FB
	STAA	D,ATSAVE	;STAY ON ATTRACT MAP AT SPEED
15$:	LDAA	I,80
	STAA	D,VEL
	LDAA	I,8
	STAA	D,VPOS
	LDAA	I,6
	STAA	D,ROTOUT
	LDAA	I,30
	STAA	D,ROTATE
	STAA	D,DIREC
	LDAA	D,HPOS		;CHECK FOR CELL CROSSING
	ANDA	I,0F0
	CMPA	D,SCRCNT	;NO CELL CROSSING
	BEQ	20$
	JSR	STDRN		;START A DRONE
20$:	LDAA	D,HPOS		;UPDATE OLD POS POINTER
	ANDA	I,0F0
	STAA	D,SCRCNT
	LDAA	D,STAT
	BNE	80$
25$:	LDAA	D,FRAME		;TAKE TURNS
	BMI	40$
	CMPA	I,2
	BHI	ATEND
	LDAB	I,2		;RATING
	LDAA	D,SCOR
	CMPA	D,SOCMP
	BCS	30$		;"SORRY"
	ADDB	I,2
	CMPA	D,GOODCMP
	BCS	30$		;"SO-SO"
	ADDB	I,2
	CMPA	D,ACECMP
	BCS	30$		;"GOOD"
	ADDB	I,2		;"ACE"
30$:	LDAA	I,7		;LOCATION
	JSR	MESSAGE
	LDAB	I,16		;"INSERT COIN"
	LDAA	I,27
	JSR	MESSAGE
	BRA	ATEND
40$:	CMPA	I,81		;TOP SCORE AND BONUS FOR
	BHI	45$		;OUTPUT MESSAGE ONCE
	LDAB	I,0E		;"TOP SCORE"
	LDAA	I,7
	JSR	MESSAGE
45$:	CLR	E,TEMP
	LDAA	D,TRAKS
	STAA	D,TEMP+1
	LDX	D,TEMP
	LDAA	X,HISCR
	LDX	I,HISMSD	;SHOW IT
	JSR	DISDIG
	LDAA	D,XTDSCR	;"BONUS FOR"
	BEQ	70$
	LDAA	D,FRAME		;OUTPUT MESSAGE ONCE
	CMPA	I,81
	BHI	55$
	LDAB	I,0C
	LDAA	I,27
	JSR	MESSAGE
55$:	LDAA	D,XTDSCR
	LDX	I,BFMSD		;SHOW IT
	JSR	DISDIG
	BRA	ATEND
70$:	CLRB			;BLANK MESSAGE
	LDAA	I,27
	JSR	MESSAGE
	BRA	ATEND
80$:	LDAA	D,FRAME		;SELECT TRACK+PUSH START
	BMI	40$
	BNE	ATEND
	LDAB	I,12
	LDAA	I,7
	JSR	MESSAGE
	LDAB	I,10
	LDAA	I,27
	JSR	MESSAGE
ATEND:	LDAA	E,STRTSW	;START SWITCH?
	BPL 	80$		;NO
	LDAA	D,$$CRDT	;MONEY?
	BEQ	90$		;NO
	DEC	E,$$CRDT	;YES, START GAME
	LDAA	I,80
	STAA	D,MODE
	LDAA	D,TRAKS
	STAA	D,TRKN		;SET TRACK NO.
	JSR	INIT		;INITIALIZE AND DRAW SCREEN
	LDAA	D,ATSAVE	;TURN SOUNDS ON
	ORAA	I,7		;AND LEDS OFF
	STAA	D,ATSAVE
	LDAA	I,90		;START AT 90 FUEL UNITS
	STAA	D,FUEL
	LDX	I,FUEMSD	;DISPLAY IT
	JSR	DISDIG
	LDAA	I,7		;"FUEL"
	LDAB	I,0A
	JSR	MESSAGE
	LDAA	D,TMESAV
	STAA	D,FUELTM
	CLRA			;"SCORE"
	LDAB	I,0B
	JSR	MESSAGE
	CLR	E,SCOR	
	STAA	E,CCRST
	STAA	E,DCRST
80$:	LDAA	D,$$CRDT
	BEQ	90$
	LDAA	D,FRAME
	CMPA	I,0FF
	BNE	90$
	STAA	D,STAT
90$:
100$:	RTS
	.PAGE
	.SBTTL	INDEX
	.REPT	0
*************************
*
*	INDEX
*
*************************

DESCRIPTION:	ADD ACCUMULATOR B TO INDEX REGISTER X.


REGISTERS:
	IN:	B,X

	OUT:	B IS DESTROYED, X=X+B


STACK USE:	2 BYTES FOR RETURN ADDRESS





BASE PAGE USE:	MODIFY: XTEMP,XTEMP+1





	.ENDR
INDEX:	STX	D,XTEMP
	ADDB	D,XTEMP+1	;ADD B TO L.S. BYTE OF X
	STAB	D,XTEMP+1
	BCC	10$
	INC	E,XTEMP		;ADD CARRY IF ANY
10$:	LDX	D,XTEMP		;NEW VALUE TO X
	RTS
	.PAGE
	.SBTTL	INITIALIZE
	.REPT	0
*************************
*
*	INIT
*
*************************

DESCRIPTION:	INITIALIZATION ROUTINE FOR STATE CHANGES (ATTRACT,GAME) CLEARS
		MEMORY FROM 00 TO N WHERE N IS DEFINED AS THE LAST STATE VARIABLE

REGISTERS:
	IN:

	OUT:


STACK USE:	2 BYTES FOR RETURN ADDRESS





BASE PAGE USE:	ALL STATE VARIABLES AND ALPHA/NUMERICS





	.ENDR
INIT:	LDX	I,N		;LAST STATE VARIABLE
	CLRA			;GET A ZERO
10$:	STAA	X,0		;STORE UNTIL LOCATION ZERO
	DEX
	BNE	10$
	STAA	D,0
	LDAA	I,8		;INITIALIZE POSITIONS
	STAA	D,HPOS		;PLAYER
	STAA	D,HPOS+1	;DRONE
	LDAB	D,MODE		;ATTRACT MODE?
	BEQ	20$		;YES
	LDAA	I,16		;NO, GAME MODE
	STAA	D,VPOS		;PLAYER
	LDAA	I,19
	BRA	25$
20$:	LDAA	I,8		;ATTRACT
	STAA	D,VPOS		;PLAYER
	LDAA	I,0A
25$:
	STAA	D,VPOS+1	;DRONE
	STAA	D,DVISBL
	LDAA	I,30
	STAA	D,DIREC		;ROTATIONS
	STAA	D,DIREC+1
	STAA	D,ROTATE
	STAA	D,ROTATE+1
	LDAA	I,6
	STAA	D,ROTOUT
	INCA
	STAA	D,ROTOUT+1
	JSR	SCROLL
	JSR	SHVUPD
	JSR	SCROUT		;OUTPUT A SCREEN
	LDAA	I,0F0
	STAA	D,CRSHSV	;NO CRASH SOUND
	LDAB 	D,TRAKS
	JMP	TRKSL2
	.PAGE
	.SBTTL	OPTION
	.REPT	0
*****************************
*
*	OPTION
*
*****************************

DESCRIPTION:	READS AND INTERPRETS THE OPTION SWITCHES.
		STORES RESULT IN BASE PAGE LOCATIONS FOR LATER USE.


REGISTERS:
	IN:

	OUT:	A,B-BLITZED

STACK USE:	2 BYTES RETURN ADDRESS

BASE PAGE USE:	MODIFY:	TEMP,TEMP+1
		WRITE:	FUELTM,TMESAV,XTDSCR,COST,$CMODE

	.ENDR

OPTION:	LDAA	E,OPTS+3	;GET TIME/FUEL OPTION
	COMA
	ANDA	I,2
	LDAB	E,OPTS+2
	COMB
	ANDB	I,2
	LSRB
	ABA
	STAA	D,TEMP+1
	LDAA	I,TMETBL/100
	STAA	D,TEMP
	LDX	D,TEMP
	LDAA	X,TMETBL&0FF
	STAA	D,TMESAV	;USED TO RESET IN TIME
				;BONUS, LOOK IT UP
	LDAA	D,TRAKS		;TRAK*6
	ASLA
	TAB
	ASLA
	ABA
	LDAB	D,TEMP+1	;TIME/FUEL
	ABA
	TAB
	INCB			;+2
	INCB
	LDX	I,XPLTBL
	JSR	INDEX
	LDAA	E,OPTS+1	;GET BONUS OPTION
	COMA
	ANDA	I,1
	ASLA
	LDAB	E,OPTS
	COMB
	ANDB	I,1
	ABA
	BEQ	40$		;NO BONUS
	CMPA	I,1
	BNE	20$
	LDAA	I,99		;-1. LIBERAL
	BRA	30$
20$:	CMPA	I,2
	BNE	25$
	CLRA			;0 STANDARD
	BRA	30$
25$:	LDAA	I,1		;1. CONSERVATIVE
30$:	LDAB	X,0		;GET VALUE
	ABA			;ADD BONUS OFFSET
	DAA
40$:	STAA	D,XTDSCR
	STAA	D,ACECMP
	DEX
	LDAA	X,0
	STAA	D,GOODCMP
	DEX
	LDAA	X,0
	STAA	D,SOCMP
				;GET COIN OPTIONS
	LDAA	E,OPTS+3
	COMA
	ANDA	I,1
	ASLA
	LDAB	E,OPTS+2
	COMB
	ANDB	I,1
	ABA
	BNE	50$
	LDAA	I,1		;FREE PLAY
	STAA	D,$$CRDT
50$:
				;GET MECH MULTIPLIERS
	LDAB	E,RMECHM	
	COMB
	ANDB	I,1C
	ABA
	STAA	D,$CMODE
	LDX	D,XINDEX
	RTS
	.SBTTL	 STEERING
	.REPT 0
***************************
*
*	STEER
*
***************************
	
DESCRIPTION:	STEERING FOR ALL CARS
	
REGISTERS:
	IN:	X=CAR #
	OUT:	X RESTORED; A,B-BLIZTED
	
STACK USE:	2 BYTES FOR RETURN ADDRESS
	
BASE PAGE USE:	READ: XINDEX,VEL,CRSCNT
		MODIFY: ROTATE,ROTOUT,DIREC	
	.ENDR
STEER:	LDAA	D,XINDEX+1	;TEST FOR PLAYER CAR
	BNE	50$		;DRONE, NO STEERING WHEEL
	LDAA	E,STRFLG	;CHECK STEERING
	BMI	50$		;NO CHANGE . DONT CHANGE
	LDAB	D,VEL		;STEER INCREMENT =
	ANDB	I,0F8
	BEQ	10$		;NO MOTION IF STILL
	CMPB	I,40		;1,2,2,2
	BLS	5$
	LDAB	I,1
5$:	ADDB	I,1
	ANDB	I,3
;	ROLB			;1,2,2,3
;	ROLB
;	ANDB	I,1
;	ADCB	I,1
10$:	ASLA			;GET DIRECTION TO CARRY
	ASLA
	LDAA	X,STAT
	ORAA	I,80
	BCC	12$
	ANDA	I,7F
12$:	STAA	X,STAT
	BCC 	15$
	NEGB
15$:	LDAA	D,ROTATE	;UPDATE ROTATION
	JSR	MOD24
30$:	STAA	D,ROTATE	
	STAA	E,STRRST	;RESET STEERING LATCH
50$:	RTS
DIRECT:	LDAA	D,XINDEX+1
	BNE	2$
	LDAA	D,CRSCNT
	BNE	3$
2$:	LDAB	X,ROTATE
	LSRB
	LSRB
	LSRB
	LDX	I,ROTTAB
	JSR	INDEX
	LDAA	X,0
	LDX	D,XINDEX
	STAA	X,ROTOUT
3$:	CPX	I,0
	BNE	80$ 
	LDAA	I,2
	TST	X,VEL		;FAST OR SLOW?
	BEQ	80$
	BMI	5$
	INCA			;UPDATE TEST IF GOING SLOW
5$:
	LDAB	X,ROTATE
	SUBB	X,DIREC
	STAB	D,TEMP		;FOR SIGN TEST NEAR 30$
	BPL 	10$
	NEGA			;IF NEGATIVE, NEGATE PARAMETERS
	NEGB
10$:	CMPB	I,0A		;SKID IF DIF > 0A
	BLS	15$
	CMPB	I,30		;AND < 30
	BCC	15$
	TST	E,CRSCNT	;AND NOT CRASH
	BNE 	15$
	STAB	E,SKDSND
15$:	CMPB	I,02
	BHI	20$
	LDAA	X,ROTATE
	BRA	70$
20$:	ADDA	X,DIREC
	LDAB	D,TEMP
	JSR	MOD24A
70$:	STAA	X,DIREC
80$:	RTS
	.PAGE
	.SBTTL	CRASH
	.REPT 0
***********************
*
*	CRASH
*
***********************
	
DESCRIPTION:	CRASH SEQUENCE FOR PLAYER CAR
	
REGISTERS:
	IN:
	OUT:	A,B-BLITZED
	
STACK USED:	2 BYTES RETURN ADDRESS
	
BASE PAGE USE:	MODIFY:STAT,VEL,CRSCNT,ROTATE,CRSHSV
	
	.ENDR
CRASH:	LDX	D,XINDEX
	BNE	51$
5$:	LDAA	D,CRSCNT	;CRASHED ALREADY?
	BNE	20$		;YES
	LDAA	D,STAT		;CRASH?
	ANDA	I,2
	BEQ	30$		;NO
	LDAB	I,30
	LDAA	D,CRSTIM
	BEQ	10$
	STAB	D,CRSTIM
	BRA	30$
10$:
				;CRASH TIMER NOT 0, SET UP AGAIN
	STAB	D,CRSTIM	;ELSE, FIRST TIME THROUGH HERE
	CLR	E,CRSHSV	;SET CRASH SOUND
	CLR	E,VEL
	JSR	STDRN
20$:	LDAA	D,CRSCNT		;INCREMENT CRASH COUNTER
	ADDA	I,4
	STAA	D,CRSCNT
				;FLIP/FLOP ROTATION 7 -- CRASHED CAR
	LDAA	D,FRAME
	ANDA	I,7		;ADD THE CAR PICTURE IN
	CMPA	I,5
	BNE	23$
	LDAB	D,ROTATE
	LSRB
	LSRB
	LSRB
	LDX	I,ROTTAB
	JSR	INDEX
	LDAB	X,0
	LDX	D,XINDEX
	STAB	D,ROTOUT
23$:	ANDA	I,7
	BNE	26$
	LDAA	D,FRAME		;CIRCULAR MOTION FOR FLAMING PIC
	ANDA	I,18
	CMPA	I,10
	BCS	25$
	EORA	I,8
25$:	ADDA	I,7
	STAA	D,ROTOUT
26$:	LDAA	D,FRAME
	ANDA	I,3
	BNE	28$
	LDAB	D,VISAVE	;FLASH VIDEO
	EORB	I,80
	STAB	D,VISAVE
28$:	CLR	E,VEL		;SET VELOCITY TO 0
	RTS
30$:	LDAA	D,CRSTIM
	BEQ	50$
	DECA			;DECREMENT TIMER
	STAA	D,CRSTIM
50$:	RTS
51$:				;DRONE
	LDAA	X,STAT		;CRASH?
	ANDA	I,2
	BEQ	80$		;NO
	LDAB	I,60
	LDAA	X,CRSTIM	;ALREADY DETECTED?
	BEQ	60$		;NO
	STAB	X,CRSTIM	;YES
	BRA	80$
60$:	STAB	X,CRSTIM	;SET TIMER
	CLR	X,VEL		;KILL VELOCITY
	LDAB	D,CRSHSV	;CRASH LOUD?
	BPL	80$		;YES, LEAVE ALONE
	LDAA	I,80
	STAA	D,CRSHSV
80$:	LDAA	X,CRSTIM	;DONE?
	BEQ	90$		;YES
	DEC	X,CRSTIM	;NO
90$:	RTS

	.PAGE
	.SBTTL	 SOUND
	.REPT 0
************************
*
*	SOUND
*
************************
	
DESCRIPTION:	OUTPUT MOTOR SOUND FOR PLAYER AND DRONE.
		HANDLE CRASH AND EXTENDED PLAY SOUNDS

	
REGISTERS:
	IN:
	OUT:A,B - BLIZTED
	
STACK USE:	2 BYTE FOR RETURN ADDRESS
	
BASE PAGE USE:	READ:ROTATE,VEL,GEAR,XINDEX
		MODIFY:TEMP,SOUNDS
	
	.ENDR
SOUND:	LDAA	D,XINDEX+1
	BEQ	20$		;PLAYER
	LDAA	D,HPOS		;DRONE SOUND DEPENDS ON DISTANCE FROM PLAYER
	SUBA	D,HPOS+1
	BMI	5$
	COMA
5$:	CMPA	I,0F0
	BCC	7$
	CLRA
7$:
	LDAB	D,VPOS
	SUBB	D,VPOS+1
	BMI	10$
	COMB
10$:	CMPB	I,0F0
	BCC	12$
	CLRB
12$:
	CBA
	BHI	15$
	TAB
15$:	
	ANDB	I,0F
	LDAA	D,VISAVE
	ANDA	I,0F0		;DRONE VOLUME
	ABA			;CONTROL
	STAA	D,VISAVE
	LDAB	D,VEL+1		;FREQ. CONTROL
	ANDB	I,0F0
	LDAA	D,SOUNDS
	ANDA	I,0F
	BRA	100$
20$:	LDAA	D,VEL		;PLAYER
	LSRA
	LSRA
	LSRA
	STAA	D,TEMP
	LDAB	D,GEAR
	LDX	I,RATIO
	JSR	INDEX
	LDAB	X,0		;GET GEAR RPM RATIO
	LDX	D,XINDEX	;RESTORE X
40$:	ADDA	D,TEMP		;VEL*RATIO
	DECB
	BNE	40$
	RORA
	LSRA
	LSRA			;VEL*RATIO/8
	LDAB	D,GEAR
	ASLB
	SBA
	BPL	60$
	CLRA
60$:	CMPA	I,0F
	BLS	80$
	LDAA	I,0F
80$:	LDAB	D,SOUNDS
	ANDB	I,0F0
100$:	ABA
	STAA	D,SOUNDS	;OUTPUT TO SOUND REG
	COMA
	STAA	E,MSND1

SNDCRS:	LDAA	D,CRSHSV	;CRASH SOUND HANDLER
	CMPA	I,0F0
	BEQ	30$
	LDAB	D,FRAME
	ANDB	I,7
	BNE	30$
	ADDA	I,8
	STAA	D,CRSHSV
30$:	LDAB	D,CRSTIM
	BNE	40$
	LDAB	D,VEL
	ANDB	I,0F0
	BEQ	40$
	LDAB	D,STAT
	ANDB	I,8		;SQUISHY?
	BEQ	40$		;NO
	LDAB	D,VPOSL+1	;RANDOM NUMBER
	EORB	D,HPOSL+1
	EORB	D,FRAME
	RORB
	RORB
	ANDB	I,2		;RANDOMLY ADD SKID
	BEQ	40$
	STAA	E,SKDSND
40$:	STAA	E,CRSSND


;EXTENDED PLAY SOUND HANDLER
	LDAA	D,XINDEX+1
	BNE	60$		;ONLY ONCE PER FRAME
	LDAA	D,BEEP		;WANT THE BEEPER ON???
	BEQ	60$		;NO
	DECA			;YES,  DEC BEEP TIMER
	STAA	D,BEEP
	COMA
	ANDA	I,8		;TOGGLE BEEP BIT EACH 8TH FRAME
	ASLA
	LDAB	D,VISAVE
	ANDB	I,0EF
	ABA
	STAA	D,VISAVE
60$:	RTS
	.PAGE
	.SBTTL	 POSITION
	.REPT 0
*************************
*
*	POSITION
*
*************************	
	
DESCRIPTION:	UPDATES THE CAR POSITION
	
REGISTERS:
	IN:	X INDEX FOR CAR/DRONE
	OUT:	A,B-BLIZTED; X-RESTORED
	
STACK USE:	2 BYTES RETURN ADDRESS
		2 BYTES FOR SUB CALL
	
BASE PAGE USE:	VEL,DIREC,HINC,VINC,XTEMP,TEMP
		HPOS,HPOSL,VPOS,VPOSL,MULT0
		MULT1,MULT2,MULT3
	.ENDR
	
POSITION:
	LDAA	X,VEL		;GET CAR VELOCITY
	BEQ	30$		;VEL=0, DON'T UPDATE
	LSRA
	LSRA
	LSRA			;KEEP VEL/8 IN MULT2
	STAA	D,MULT2
	LDAB	X,DIREC		;GET DIRECTION
	LSRB
	LSRB
	LSRB
	STAB	D,TEMP+1
	LDX	I,HOFF
	JSR 	INDEX
	LDAB	X,0
	BEQ	20$		;GO DO VERTICAL
	JSR	MULT		;GET VEL*HOFF
	LDX	D,XINDEX	
	STAA	X,HINC
	ADDA	X,HPOSL		;ADD TO POSITON (L)
	STAA	X,HPOSL
	LDAA	I,0		;ADD TO HIGH BYTE-PRESERVE CARRY
	LDAB	D,MULT0
	BPL	15$
	DECA			;IF MINUS, EXTEND SIGN
15$:	ADCA	X,HPOS
	ANDA	I,7F
	STAA	X,HPOS
20$:	LDAB	D,TEMP+1	;DO VERTICAL
	LDX	I,VOFF
	JSR	INDEX
	LDAB	X,0
	BEQ 	30$		;END
	JSR	MULT		;GET VEL*VOFF
	LDX	D,XINDEX
	STAA	X,VINC		;SAVE VERT DIRECTION
	ADDA	X,VPOSL
	STAA	X,VPOSL
	LDAA	I,0		;ADD TO HIGH BYTE-PRESERVE CARRY
	LDAB	D,MULT0
	BPL	25$
	DECA			;IF MINUS EXTEND SIGN
25$:	ADCA	X,VPOS
	ANDA	I,7F
	STAA	X,VPOS
30$:	LDX	D,XINDEX	;RESTORE CAR INDEX
	BNE 	35$		;SKIP IF PLAYER, ELSE
;
;FINDOUT IF THE PLAYER HAS CHANGED CELLS
;
	LDAA	D,HPOS
	ANDA	I,0F0		;EXTRACT CELL NUMBER
	LDAB	D,POSNOW
	ANDB	I,0F0
	CBA
	BNE	32$		;A NEW CELL
	LDAA	D,VPOS
	ANDA	I,0F0		;EXTRACT CELL NUMBER
	LDAB	D,POSNOW+VPOS-HPOS
	ANDB	I,0F0
	CBA
	BNE	32$		;IN A NEW CELL
	RTS
;
;IN A NEW CELL SAVE CURRENT POSITION TO START THE DRONE
;
32$:	LDX	I,8.		;MOVE INDEX
33$:	LDAA	X,POSNOW-2	;CURRENT POSITION
	STAA	X,POSLAST-2	;BECOMES LAST
	LDAA	X,HPOS-2	;NEW CURRENT POSITION
	STAA	X,POSNOW-2	;SAVED
	DEX
	DEX
	BNE	33$
	LDX	D,XINDEX	;RESTORE X
	RTS
;
;
35$:	LDAA	X,VPOSL		;CALCULATE SCREEN POS FOR DRONE
	SUBA	D,SVPOS+1	;VERTICAL
	STAA	D,DRONEV+1
	LDAA	X,VPOS
	SBCA	D,SVPOS
	ANDA	I,7F
	STAA	D,DRONEV
	ADDA	I,1
	ANDA	I,70
	BNE	100$		;MUST BE LESS THAN 10 TO BE SEEN
	LDAA	D,DRONEV+1	;SHIFT DP # OVER 4
	LDAB	D,DRONEV
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB			;B=CO-ORD OF DRONE RELATIVE TO SCREEN POS
	LDAA	D,ROTOUT+1
	BITA	I,8
	BNE	50$
	LDAA	I,0F0
	SBA
	BRA	55$
50$:	LDAA	I,10
	ABA
55$:	STAA	D,DRONEV
	LDAB	D,ROTOUT+1
	ANDB	I,8
	BNE	57$
	CMPA	I,0F2
	BHI	100$
	TSTA
	BEQ	100$
	BRA	58$
57$:
	CMPA	I,0E
	BLS	100$		;NOT VISIBLE
58$:	LDAA	X,HPOSL		;DO HORIZ
	SUBA	D,SHPOS+1
	STAA	D,DRONEH+1
	LDAA	X,HPOS
	SBCA	D,SHPOS
	ANDA	I,7F
	STAA	D,DRONEH
	ANDA	I,70
	BNE	100$		;NOT ON SCREEN
	LDAA	D,DRONEH+1
	LDAB	D,DRONEH
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB			;B=CO-ORD OF DRONE RELATIVE TO SCREEN POS
	LDAA	D,ROTOUT+1
	BITA	I,10
	BNE	60$
	LDAA	I,0F0
	SBA
	BRA	65$
60$:	LDAA	I,0D
	ABA
65$:	STAA	D,DRONEH
	LDAB	D,ROTOUT+1
	ANDB	I,10
	BNE	80$
	CMPA	I,0F7
	BHI	85$
	CMPA	I,0EA
	BLS	85$
	BRA	100$		;NOT VISIBLE
80$:	CMPA	I,5
	BLS	85$
	CMPA	I,12
	BLS	100$
85$:	LDAB	I,1
	STAB	D,DVISBL
90$:	RTS
100$:	LDAA	I,7
	STAA	D,ROTOUT+1
	CLR	E,DVISBL	;0=NOT VISIBLE
	RTS
;MULTIPLY ROUTINE
;MULT0=MSB OF RESULT
;MULT1=LSB OF RESULT
;MULT2=TEMP STORAGE FOR A SET BEFORE CALL
;MULT3=TEMP STORAGE FOR B
;A+B+OR-A,B SAVED X, BLITZED
MULT:	STAB	MULT3		;SAVE ENTRY B
	BPL	1$
	NEGB			;!B!
1$:	LDX	I,4		;BIT COUNT
	CLRA			;PRODUCT=0
	LSRB			;START SHIFTING MPLIER
2$:	BCC	3$
	ADDA	MULT2		;ADD MCAND TO PROD IF MPLIER BIT=1
3$:	LSRA			;SHIFT PROD. DOWN
	RORB			;DOUBLE PREC
	DEX
	BNE	2$		;LOOP
	TST	MULT3		;CHECK ORIG SIGN OF MPLIER
	BPL	4$
	NEGA			;NEGATE PROD IF MPLIER NEG
	NEGB
	SBCA	I,0
4$:	ASLB
	ROLA
	ASLB
	ROLA
	STAA	MULT0		;SAVE PRODUCT
	RTS
	.PAGE
	.SBTTL	COLLIDE
	.REPT 0
************************
*
*	COLLIDE
*
************************
	
DESCRIPTION:	DETECT CAR TO DRONE COLLISION
		IF SO, SKID
	
REGISTERS:
	IN:
	OUT:	A,B-BLITZED
	
STACK USE:	2 BYTES FOR RETURN ADDRESS
	
BASE PAGE USE:	READ:FRAME,DVISBL,DRONEV(2),DRONEH(2),CRSCNT
		MODIFY:TEMP,STAT,ROTATE
	
	.ENDR
COLLIDE:LDAA	D,FRAME		;ODD FRAMES ONLY
	RORA
	BCS	5$
	JMP	100$
5$:	CLR	E,SPNFLG
	LDAA	D,STAT		;CLEAR STATUS BITS
	ANDA	I,0FE
	STAA	D,STAT
	LDAA	D,STAT+1
	ANDA	I,0FE
	STAA	D,STAT+1
	LDAB	D,DVISBL
	BEQ	100$		;NOT VISIBLE, EXIT
	LDX	I,4
10$:	LDAA	X,HPOSL		;CHECK FOR COLLISION
	SUBA	X,HPOSL+1		;VERTICAL FIRST
	LDAB	X,HPOS
	SBCB	X,HPOS+1
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	ASLA
	ROLB
	BPL	30$
	NEGB
30$:	CMPB	I,5		;4 X 4 - SPINOUT
	BHI	40$
	INC	E,SPNFLG
40$:	CMPB	I,12		;12 X 12 BOX - NUDGE
	BHI	100$
	DEX
	DEX
	DEX
	DEX			;NOW CHECK HORIZONTAL
	BEQ	10$
	LDAA	D,DSKDCT
	BNE	42$
	LDAA	I,10
	STAA	D,DSKDCT
42$:	LDAB	D,SPNCNT
	BNE	SPNOUT
	LDAA	D,SPNFLG
	CMPA	I,2
	BNE	45$
	LDAA	I,0A0
	STAA	D,SPNCNT
	LDAA	D,ROTATE	;SET UP FOR SPINOUT
	LSRA
	LSRA
	LSRA
	STAA	D,SPNROT
45$:	STAA	E,SKDSND
	LDAB	I,4
 	LDAA	D,STAT
	BMI	50$
	NEGB
50$:	ORAA	I,1		;SET PLAYER SKID STATUS
	STAA	D,STAT
	LDAA	D,STAT+1	;DRONE STATUS
	ORAA	I,1
	STAA	D,STAT+1	;VEER DUE TO LIGHT COLLISION
	LDAA	D,SPNCNT
	BNE	SPNOUT
	LDAA	D,ROTATE
	JSR	MOD24
	STAA	D,ROTATE
100$:	LDAA	D,SPNCNT
	BNE	45$
110$:	LDX	D,XINDEX
	RTS
SPNOUT:	LDAA	D,SPNCNT	;SPINOUT DUE TO HARD COLLISION
	ADDA	I,4
	STAA	D,SPNCNT
	LDAB	D,CRSCNT
	BNE	50$
	LDAB	D,SPNROT
	ADDB	I,1
	CMPB	I,18
	BNE	30$
	CLRB
30$:	STAB	D,SPNROT	;LOOKUP IN TABLE
	LDX	I,ROTTAB
	ANDB	I,1F
	JSR	INDEX
	LDAB	X,0
	STAB	D,ROTOUT
	LDAB	D,STAT
	ORAB	I,1
	STAB	D,STAT
50$:	LDX	I,XINDEX
	RTS
	.PAGE
	.SBTTL	 ACCELERATION
	.REPT 0
***********************
*
*	ACCELERATION
*
***********************
	
DESCRIPTION:	ACCELERATE PLAYER CAR ACCORDING TO GEARS
	
REGISTERS:
	IN:
	OUT:	A,B-BLIZTED
	
STACK USE:	2 BYTE FOR RETURN ADDRESS
	
BASE PAGE USE:	READ:FRAME,STAT
		MODIFY:VEL,TEMP,TEMP1,GEAR
	.ENDR
	
ACCEL:	CLR	E,GEAR		;FIRST READ GEAR
	LDX	I,GEAR1
4$:	ROL	X,0
	BMI	5$
	INC	E,GEAR
	INX
	CPX	I,GEAR3+1
	BNE	4$
5$:
	LDAA	D,FRAME		
	ANDA	I,03
	BEQ	7$
	JMP	ACEND
7$:
	LDAB	D,VEL
	LSRB			;GET VEL/8
	LSRB
	LSRB
	ANDB	I,0FE		;EVEN IT
	LDAA	D,GEAR
	BITA	I,02
	BEQ	10$		;1ST OR 2ND GEAR
	INCB
10$:	LDAA	D,MODE		;FREEZE MODE?
	ANDA	I,10
	BNE	15$		;YES, DECEL
12$:	LDAA	E,GASSW		;GAS PEDAL PUSHED
	ASLA
	BPL	15$		;NO, DECEL
	LDX	I,ACTAB		;YES,ACCEL
	BRA	17$
15$:	LDX	I,DACTAB
17$:	JSR	INDEX
	LDAB	X,0
20$:	LDAA	D,GEAR
	LSRA
	BCS	30$		;2ND OR 4TH GEAR
	LSRB			;1ST OR 3RD GEAR
	LSRB			;HI NIBBLE
	LSRB
	LSRB
30$:	ANDB	I,0F
	PSHB
	BITB	I,8
	BNE	35$
	TBA
	CMPA	I,3
	BLS	35$
	LDAA	D,STAT
	ORAA	I,4
	TAB		
	ANDB	I,0A		;IF QUISH OR CRASH
	BNE	37$		;DONT MAKE SKID SOUND
	STAA	E,SKDSND
	BRA	37$
35$:	LDAA	D,STAT
	ANDA	I,0FB
37$:	STAA	D,STAT
	PULB
	BITB	I,8		;TEST IF NEGATIVE NIBBLE
	BEQ	40$		;NO,GO TO SPEED UP
	ORAB	I,0F0		;YES, EXTENDED SIGN
40$:	TBA			;FOR LATER USE
	ADDB	D,VEL		;UPDATE VELOCITY
	TSTA			;ACCELERATING?
	BPL	50$		;YES
	INCB			;NO, DECEL; CHECK FOR FF VEL
	BNE	60$		;IF NOT 0 NO UNDERFLOW
	BRA	70$		;END
50$:	INCB			;ACCEL-CHECK FOR FF VEL
	BNE 	60$		;NO,NO OVERFLOW
	DECB			;YES, VEL=FE
60$:	DECB
70$:	LDAA	D,STAT		;TEST CRASH BIT
	ANDA	I,2
	BEQ	80$		;NO CRASH
	CMPB	I,36		;YES, LIMIT SPEED
	BLS	80$
	LDAB	I,36		;MAX SPEED WHITE OFF ROAD
80$:	LDAA	D,STAT		;TEST FOR SQUISHY
	ANDA	I,8
	BEQ	90$		;NO
	CMPB	I,80		;YES, LIMIT SPEED
	BLS	90$		;<= 80 STORE IT
	CMPB	I,0C0		;> C0, -1F
	BHI	85$
	CMPB	I,90		;< 90, OK
	BLS	95$
	SUBB	I,0F		;ELSE -F
	BRA	90$
85$:	SUBB	I,1F
90$:	STAB	D,VEL
95$:	LDX	I,2		;OUTPUT SPEED TO SCREEN
	LSRB
100$:	TBA			;SAVE FOR NEXT PASS
	ANDB	I,7
	CMPB	I,2		;NO 3 ALLOWED
	BLS	102$
	INCB
102$:	CMPB	I,6		;NO 7 ALLOWED
	BLS	105$
	INCB
105$:	ADDB	I,30
	STAB	X,SPDMSD	;OUTPUT
	TAB			;SHIFT NEXT 3 BITS
	LSRB
	LSRB
	LSRB
	DEX
	BNE	100$		;NOT DONE
	TSTB			;DO MSD, 0 OR 1
	BEQ	110$
	ADDB	I,30
110$:	STAB	D,SPDMSD
	LDAB	I,15		;"SPEED"
	LDAA	I,0F
	JSR	MESSAGE
ACEND:	LDX	D,XINDEX	;RESTORE X
	RTS
	.PAGE
	.SBTTL	 SCORE
	.REPT 0
*************************
*
*	SCORE
*
*************************
	
DESCRIPTION:	CHECK FOR CHECKPOINTS
		UPDATE SCORE IF NEEDED
	
REGISTERS:
	IN:
	OUT:	A,B,X-BLITZED
	
STACK USE:	2 BYTES FOR RETURN ADDRESS
	
BASE PAGE USE:	READ: VPOS,HPOS,TRKN
		MODIFY: TEMP,TEMP+1,SCRCNT,SCOR,A/N
	
	.ENDR
SCORE:
	LDAA	D,VPOS
	ANDA	I,0F0
	LSRA
	LDAB	D,HPOS
	LSRB
	LSRB
	LSRB
	LSRB
	ABA
	ASLA
	ASLA
	LDAB	D,TRKN
	LSRB
	RORA			;ADD IN TRACK NO. 
	LSRB
	RORA
	STAA	D,TEMP+1
	LDAA	I,MAPTBL/100
	ABA			;ADD TRACK OFFSET
	STAA	D,TEMP
	LDX	D,TEMP		;POINTER TO CELL CHRISIN
	LDAA	X,MAPTBL&0FF	;GET CELL CODE
	ANDA	I,0C0		;TOP 2 BITS HAVE CHECKPONT CODE
	LDAB	D,SCRCNT	;OLD CHECKPOINT CODE
	ADDB	I,40		;ADD 1
	ANDB	I,0C0		;AND TRUNCATE TO 2 BITS
	CBA			;CHECK IF REACHED NEXT CHECK
	BNE	SCREND		;NOT YET REACHED
	STAB	D,SCRCNT	;YES. HIT NEXT CHECKPOINT
	LDAA	D,SCOR		;INCREMENT SCORE BY10
	INCA
	DAA
	STAA	D,SCOR
	JSR	STDRN		;START A DRONE NOW
SCORIT:	LDAB	I,0B		;MESS #
	CLRA			;LOCATION
	JSR	MESSAGE
	LDAA	D,SCOR
	LDX	I,SCRMSD
	JSR	DISDIG
SCREND:	LDAA	I,30		;SCORE INFLATION TRAILING ZERO
	STAA	D,SCRLSD+1
	RTS
	.PAGE
	.SBTTL	SCROLL
	.REPT	0
*************************
*
*	SCROLL
*
*************************
	
DESCRIPTION:	SCROLL THE PLAYFIELD

STACK USE:	2 BYTES FOR SUBR CALLS

BASE PAGE USE:

	.ENDR

;
;SCROLL THE PLAYFIELD
;
SCROLL:	LDAA	I,PLYFLD/256.	;PLAYFIELD 800 TO 8XX
	STAA	D,HRAMPT
	STAA	D,VRAMPT
	CLRA
	STAA	D,THPOS		;ZERO RAM INDEX HIGH BYTE
	STAA	D,TVPOS
	LDAA	D,VPOSL		;CALCULATE SCREEN COORDS
	SUBA	I,80
	STAA	D,SVPOS+1	;SVPOS=CAR VPOS-780
	LDAA	D,VPOS
	SBCA	I,07
	ANDA	I,7F
	STAA	D,SVPOS
	TST	E,VINC		;POINT TO MOVING CORNER
	BMI	40$		;ITS AT THE TOP
	ADDA	I,0F
	ANDA	I,7F		;POINT TO BOTTOM OF SCREEN
40$:	STAA	D,SVPNT		;SET CORNER PTR.
;
;BUILD HORIZ COORDS
;
	LDAA	D,HPOSL
	SUBA	I,00
	STAA	D,SHPOS+1	;SAME LOW 8 BITS
	LDAA	D,HPOS
	SBCA	I,08		;SCRN SHPOS=CAR HPOS-800
	ANDA	I,7F
	STAA	D,SHPOS
	TST	E,HINC		;POINT TO MOVING CORNER
	BMI	70$
	ADDA	I,0F		;POINT TO THE RIGHT SIDE
	ANDA	I,7F
70$:	STAA	D,SHPNT
;
;PREPARE FOR VERTICAL ROLL
;
VERT:
	LDAA	D,SHPNT
	ANDA	I,0F
	STAA	D,VRAMPT+1	;PTR TO VERT LINE
	LDAA	D,SVPNT
	ASLA
	ASLA			;GET COLUMN STARTING ON
	ASLA
	ASLA
	STAA	D,HRAMPT+1	;PTR TO HORIZ LINE
	LDAA	D,SVPOS
	ANDA	I,0F
	STAA	D,TVPOS+1	;VERT FROM TOP
	LDAB	D,SHPNT
	ANDB	I,0F
	STAB	D,THPOS+1	;OFFSET TO CORRECT COLUMN
	LDAA	D,SVPOS		;VERTICAL
	ANDA	I,070
	LSRA
	LDAB	D,SHPNT
	LSRB
	LSRB			;HORIZONTAL
	LSRB
	LSRB
	ABA
	STAA	D,MAPPT+1	;INITIAL MAP POINTER
;
;LOAD THE VERTICAL ARRAY FOR OUTPUT
;
VALOAD:	JSR	PTSTAMP		;GET NEXT STAMP PTR HIGH
VSLOAD:	JSR	NXSTAMP		;GET NEXT STAMP INTO A
10$:	LDX	D,TVPOS		;WORKING VERT PTR
	STAA	X,VLINE		;INTO BASE PAGE RAM
	LDAB	D,TVPOS+1
	INCB
	ANDB	I,0F		;MOD 10 HEX
	STAB	D,TVPOS+1
	LDAA	D,SVPOS
	ANDA	I,0F		;LOW BITS OF POSITION
	CBA
	BEQ	80$		;ALL DONE NOW
	TSTB			;DID B WRAP TO NEXT COLL
	BNE	VSLOAD		;NO. CONTINUE WITH VERT LOAD
;
;WE CROSSED A CELL BOUNDARY, UPDATE MAP PTR
;
;VERTICAL MAPPT UPDATE
;
	LDAA	D,MAPPT+1	;LOW BYTE OF PTR
	ADDA	I,8		;MOVE TO NEXT ROW OF MAP
50$:	STAA	D,MAPPT+1
	JMP	VALOAD
80$:
;
;PREPARE FOR HORIZONTAL ROLL
;
HORIZ:	LDAA	D,SVPNT		;OFFSET TO CORRECT ROW
	ANDA	I,0F
	STAA	D,TVPOS+1	;VERT PTR
	LDAB	D,SHPOS		;HORIZ FROM LEFT SIDE
	ANDB	I,0F
	STAB	D,THPOS+1
	LDAA	D,SVPNT
	ANDA	I,070		;VERT
	LSRA
	LDAB	D,SHPOS
	LSRB
	LSRB			;HORIZ OFFSET
	LSRB
	LSRB
	ABA
	STAA	D,MAPPT+1	;INITIAL MAP INDEX
;
;LOAD THE HORIZ ARRAY
;
HALOAD:	JSR	PTSTAMP		;NEXT STAMP PTR HIGH
HSLOAD:	JSR	NXSTAMP		;GET NEXT STAMP IN A
10$:	LDX	D,THPOS		;WORKING HORIZ PTR
	STAA	X,HLINE		;INTO BASE PAGE ARRAY
	LDAB	D,THPOS+1
	INCB
	ANDB	I,0F		;INCR LOW 4 BITS ONLY
	STAB	D,THPOS+1
	LDAA	D,SHPOS
	ANDA	I,0F
	CBA			;BACK TO START?
	BEQ	80$		;ALL 16 DONE
	TSTB
	BNE	HSLOAD		;IN SAME CELL
;
;HORIZ MAPPT UPDATE
;
	LDAA	D,MAPPT+1	;LOW BYTE OF PTR
	INCA
40$:	TAB
	ANDA	I,07		;MOD 8 INCREMENT
	BNE	50$		;ITS OK USE B
	TBA			;SAVE SIGN
	SUBB	I,8		;MAKE IT WRAP MOD 8
50$:	STAB	D,MAPPT+1
	JMP	HALOAD
80$:	LDX	D,XINDEX		;DONE-EXIT
	RTS
;
;UPDATE SCREEN OUTPUT CONTROL REGISTERS
;
SHVUPD:
	LDAA	D,SVPOS
	ASLA
	ASLA			;GET STAMP NUMBER
	ASLA
	ASLA
	LDAB	D,SVPOS+1
	LSRB
	LSRB			;GET LINE IN STAMP
	LSRB
	LSRB
	ABA
	STAA	D,SVOUT		;FOR OUTPUT TO SCREEN
	LDAA	D,SHPOS
	ASLA
	ASLA			;GET STAMP NUMBER
	ASLA
	ASLA
	LDAB	D,SHPOS+1
	LSRB
	LSRB			;GET LINE IN STAMP
	LSRB
	LSRB
	ABA
	STAA	D,SHOUT		;FOR OUTPUT TO SCREEN
	RTS
	.PAGE
;
;POINT TO A STAMP IN THE CELL
;
PTSTAMP:
	ASL	E,MAPPT+1	;SHIFT LOW BYTE
	ASL	E,MAPPT+1	;SHIFT 2 TIMES
	LDAA	D,TRKN		;GET TRACK #
	LSRA
	ROR	E,MAPPT+1	;INCLUDE LOW BIT OF TRACK
	LSRA
	ROR	E,MAPPT+1	;BIT ONE OF TRACK NUMBER
	ADDA	I,MAPTBL/256.	;POINT TO MAP
	STAA	D,MAPPT
	LDX	D,MAPPT
	LDAB	X,0		;GETS CELL NUMBER
	CLR	E,ARROW		;GUESS NO ARROW
	BITB	I,20		;SHOULD THERE BE AN ARROW?
	BEQ	40$		;NO-GOOD GUESS
	LDAA	I,0FC		;GUESS NORTH ARROW
	BITB	I,10		;TEST IF REVERSED ARROWS
	BNE	30$		;YES
	INCA			;NO, MAKE STANDARD DIR, S OR W
	INCA
30$:	BITB	I,1		;TEST IF NS OR EW
	BEQ	35$		;ITS NS
	INCA			;MAKE ARROW EW
35$:	STAA	D,ARROW		;CODE FOR OUTPUT
40$:
	ANDB	I,0F		;MASK TO REAL CELL NUMBER
	ADDB	I,CELTBL&0FF00/256.
	STAB	D,STAMPT	;NEW HI STAMP PTR
	RTS
;
;GET THE NEXT STAMP IN THE CELL
;
NXSTAMP:
	LDAA	D,THPOS+1	;WORKING H PTR
	LDAB	D,TVPOS+1	;AND V PTR
	ASLB
	ASLB
	ASLB
	ASLB
	ANDA	I,0F
	ABA			;NEW PTR TO A STAMP
	STAA	D,STAMPT+1
	LDX	D,STAMPT
	TST	E,ARROW		;IS THERE AN ARROW IN THIS CELL?
	BEQ	25$		;NO ARROW
	CMPB	I,80		;TEST FOR CENTER STAMP
	BNE	25$		;NOT YET
	ANDA	I,0F
	CMPA	I,08		;TEST FOR CENTER
	BNE	25$		;NOT YET
	LDAA	D,ARROW		;GET ARROW STAMP #
	RTS
25$:	LDAB	D,STAMPT	;HIGH ADDR PTR
	CMPB	I,CELTBL&0FF00/256.+0C
	BNE	30$		;NOT SPECIAL CELL
	LDAA	I,CARPIC
	LDAB	D,TVPOS+1
	LSRB			;DETERMINE ROW
	BCC	40$		;DO A TREE
	LDAA	I,BLPIC		;BLANK PICTURE
	BRA	40$
30$:
	LDAA	X,0
40$:	RTS
	.SBTTL	TIME
	.REPT	0
*************************
*
*	TIME
*
*************************

DESCRIPTION:	TAKES CARE OF FUEL, CHECKS FOR END OF GAME AND EXTENDED PLAY,
		OUTPUTS FUEL TO SCREEN




REGISTERS:
	IN:

	OUT:	A,B BLITZED, X UNTOUCHED


STACK USE:	2 BYTES FOR RETURN ADDRESS





BASE PAGE USE:	FUELTM,FUEL,TMESAV,MODE,ROTOUT,HISCR
		READ: XTDSCR,SCORE




	.ENDR
TIME:
	LDAA	D,MODE
	ANDA	I,10
	BEQ	10$
	LDAA	D,FREEZE
	BEQ	5$
	DECA
	STAA	D,FREEZE
	BRA	TRKSEL
5$:	JMP	ATSTART
10$:	DEC	E,FUELTM
	BNE	40$		;NOT TIME TO DECREMENT
	LDAA	D,FUEL
	BEQ	40$
	ADDA	I,99		;-1
	DAA
	STAA	FUEL
	BNE	30$
20$:	LDAB	D,MODE		;CHECK MODE
	BPL	40$		;ATTRACT
	BITB	I,04		;IF ALREADY IN XPLAY, THEN
	BNE	50$		;GAME OVER
	LDAB	D,XTDSCR	;ELSE CHECK FOR XPLAY
	BEQ	50$		;NO BONUS
	CMPB	D,SCOR		;SCORE > BONUS REQUIREMENTS
	BHI	50$		;NOPE, GAME OVER
	LDAA	I,41		;YES, ADD TO FUEL
	STAA	D,FUEL
	LDAB	D,MODE		;AND SET MODE TO XPLAY
	ORAB	I,04
	STAB	D,MODE
	LDAA	D,VISAVE		;INVERT THE VIDEO
	ORAA	I,90
	STAA	D,VISAVE
	LDAA	I,7F		;SET BEEP TIMER
	STAA	D,BEEP
30$:	LDAB	D,TMESAV	;RESET FUELTM
	STAB	D,FUELTM
	LDAB	I,0A		;MESS #
	LDAA	I,7		;LOCATION
	JSR	MESSAGE
	LDAA	D,FUEL
	LDX	I,FUEMSD	;OUTPUT FUEL TO SCREEN
	JSR	DISDIG
40$:	JSR	OPTION
	BRA	TRKSEL
	;GAME OVER
50$:	LDAA	D,MODE		;SET FREEZE MODE
	ORAA	I,10
	STAA	D,MODE
	LDAA	I,0FF
	STAA	D,FREEZE
	LDAA	I,30		;SHOW 0 FOR FUEL
	STAA	D,FUELSD
	CLR	E,VEL		;STOP MOTION
	LDAA	I,3		;NO SOUNDS
	STAA	D,ATSAVE

	.SBTTL	TRACK SELECT
TRKSEL:	LDAB	D,TRAKS
	LDAA	D,$$CRDT
	BEQ	TRKEND		;NO CREDIT, EXIT
	LDAA	D,MODE
	BMI	TRKEND		;IN GAME, EXIT
	LDAA	E,TKSEL		;TRACK SWITCH TO CARRY
	ROLA
	ROLA
	ROL	E,TKSWDB	;TRACK SWITCH DEBOUNCE
	LDAA	D,TKSWDB
	CMPA	I,7F
	BNE	TRKEND		;NO SWITCH
	LDAB	D,TRAKS		;ELSE, INC TRAKS MOD 8
	INCB
	CMPB	I,ATTRK-1
	BLE	TRKSL1
TRKSL0:	CLRB
TRKSL1:	STAB	D,TRAKS
	LDAA	I,30.		;DELAY ATTRACT RESET AFTER TRACK SEL
	STAA	D,RSTTIM
;OUTPUT TRACK NUMBER AND MESSAGE
;1-3 "EASY", 4-6 "MED", 7-8 "HARD"

TRKSL2:	LDAA	I,18		;"EASY" MESSAGE
	CMPB	I,1
	BLS	50$
	INCA			;"MED"
	CMPB	I,4
	BLS	50$
	INCA			;"HARD"
50$:	TAB			;DISPLAY MESSAGE
	LDAA	I,37		;LOCATION
	JSR	MESSAGE
	LDAA	D,TRAKS		;PUT NUMBER IN FRONT
	ADDA	I,31		;ASCII BIAS
	STAA	D,37
	LDAB	I,14		;"TRACK"
	LDAA	I,17		;LOCATION
	JMP	MESSAGE
TRKEND:	RTS
	.PAGE
	.SBTTL	 MESSAGE
	.REPT 0
***************************
*
*	MESSAGE
*
***************************
	
DESCRIPTION:	OUTPUTS A MESSAGE TO A/N RAM
		MESSAGE ARE STORED IN ROM USING THE .ASCIN COMMAND
		SO D7 OF THE LAST CHARACTER IS A 1
	
REGISTERS:
	IN:	A=POSITION POINTER TO RAM
		B=MESSAGE #
	OUT:	X RESTORED; A,B-BLITZED
	
STACK USE:
	
BASE PAGE USE:	WRITE: ALPHA/NUMBERICS RAM
		MODIFY: ANPNT+1,TEMP,TEMP+1
	
	.ENDR
	
MESSAGE:STX	D,XTEMP
	LDX	I,MESS
	STX	D,TEMP		;KEEP MESSAGE ADDRESS HERE
	STAA	D,ANPNT+1
	TSTB
	BEQ	OUTPUT		;OUTPUT A BLANK
	CLRA
10$:	ADDA	I,8		;POINT TO ENGLISH MESSAGE
	DECB
	BNE	10$
	TAB
	ADDA	D,TEMP+1
	STAA	D,TEMP+1
	BCC	20$
	INC	E,TEMP		;MESSAGE POINTER IN TEMP(2)
20$:	LSRB
	LSRB			;TRACKNAMES ARE ALWAYS ENGLISH
	LSRB
	CMPB	I,18
	BCC	OUTPUT
	LDAB	E,OPTS		;GET LANGUAGE OPTION
	COMB
	ANDB	I,2
	LSRB
	LDAA	E,OPTS+1
	COMA
	ANDA	I,2
	ABA
	TAB
	LDAA	D,TEMP+1
	TSTB
	BEQ	OUTPUT		;OUTPUT ENGLISH MESSAGE
25$:	ADDA	I,8*19		;INCREMENT TO FRENCH
27$:	BCC	30$
	INC	E,TEMP		;ADD IN CARRY
30$:	DECB
	BEQ	70$
	ADDA	I,8*16		;INC TO NEXT LANG
	BRA	27$
70$:	STAA	D,TEMP+1	;TEMP(2) POINTS TO MESSAGE
OUTPUT:	LDX	D,TEMP		;MESS POINTER
	LDAA	X,0		;GET CHARACTER
	INX			;INCREMENT POINTER
	STX	D,TEMP		;STORE IT BACK
	LDX	ANPNT		;GET A/N RAM POINTER
	STAA	X,0		;STORE CHARATER THER
	BMI	10$		;IF MINUS, THAT WAS LAST
	INX			;INC RAM POINTER
	STX	D,ANPNT		;STORE IT BACK
	BRA	OUTPUT		;GO DO NEXT CHAR
10$:	LDX	D,XTEMP		;RESTORE X
	RTS
	.PAGE
;DISPLAY A TWO DIGIT BCD # WITH ZERO SUP.
DISDIG:	TAB			;SAVE FOR MSD
	BEQ	20$		;BLANK IF ZERO
	ANDA	I,0F		;GET LSD
	ADDA	I,30		;ADD ASCII BIAS
20$:	STAA	X,1		;STORE AT LSD LOCATION
	LSRB			;GET MSD
	LSRB
	LSRB
	LSRB
	BEQ	40$		;LEADING ZERO SUPPRESSION
	ADDB	I,30		;ADD ASCII BIAS
40$:	STAB	X,0		;STORE IT
	RTS
	.PAGE
	.SBTTL	SCREEN REWRITE
	.REPT 0
*************************
*
*	SCROUT
*
*************************
	
DESCRIPTION:	REWRITE THE SCREEN
	
REGISTERS:
	IN:
	OUT:
	
STACK USE:	2 BYTES FOR SUBROUTINE CALLS
		2 BYTES FOR RETURN ADDRESS
	
BASE PAGE USED:	READ:XINDEX
		MODIFY:XTEMP(2),TVPOS(2),THPOS(2),SVPOS,SHPOS,MAPPT(2)
	
	.ENDR
;
;OUTPUT ENTIRE SCREEN	
;
SCROUT:
	LDAA	D,VPOS
	PSHA			;SAVE PLAYER POSITION
	LDAA	D,HPOS
	PSHA
	LDAA	I,10		;SIXTEEN-1
30$:	PSHA			;SAVE LOOP COUNT
	JSR	SCROLL		;BUILD LINES FOR OUTPUT
	LDAA	D,FRAME
40$:	WAI			;OUTPUT ON AN NMI
	CMPA	D,FRAME
	BEQ	40$		;NOT DONE YET
	STAA	E,WTCHDG	;RESET DOGGIE
	PULA
	DECA
	BEQ	70$		;DONE
	DEC	E,HPOS		;DECR HPOS MOD 256
	BRA	30$
70$:	PULA
	STAA	D,HPOS		;RESTORE CAR COORDS
	PULA
	STAA	D,VPOS
	LDX	D,XINDEX
	RTS
	.PAGE
	.SBTTL	MODULO 24
	.REPT 0
*************************
*
*	MOD24
*
*************************
	
DESCRIPTION:	DOES AN ADDITION OF A TO B
		MODULO 24. IN THE HIGH 5 BITS
		I.E. (A+B) MOD 0C0
	
REGISTERS:
	IN:	A,B
	OUT:	A HAS ANSWER, B NOT CHANGED
	
STACK USED:	RETURN ADDRESS
	
BASED PAGE USE:	NONE
	
	.ENDR
	
MOD24:	ABA
MOD24A:	CMPA	I,0C0
	BCS 	20$
	TSTB
	BMI	10$
	SUBA	I,0C0
	BRA	20$
10$:	ADDA	I,0C0
20$:	RTS
	.PAGE
	.SBTTL	NMI
	.REPT	0
************************
*
*	NMI
*
************************

DESCRIPTION:	NMI ROUTINE OCCURS AT VBLANK OUTPUTS TO SCREEN

STACK USE:

BASE PAGE USE:	ALL REGS SAVED, SP USED AS A POINTER

	.ENDR

;
;VBLANK NMI - OUTPUT TO I/O, SCROLL RAM
;

NMI:	LDX	D,RAMCHK	;CHECK IF OK
	CPX	I,RAMCV
	BEQ	20$
	JMP	PWRON		;ERROR-RESET
20$:	STS	D,ISTEMP	;SAVE SP
;
;OUTPUT HORIZ RAM UPDATE
;
	LDAB	I,10		;LOOP COUNTER
	LDS	I,HLINE-1	;SOURCE
	LDX	D,HRAMPT	;X=(PLFD)+(PFP&F0)
30$:	PULA			;FETCH A BYTE
	STAA	X,0		;ONTO SCREEN
	INX			;INCR PTR
	DECB
	BNE	30$
;
;OUTPUT VERT RAM UPDATE
;
	LDS	I,VLINE-1
50$:	LDX	D,VRAMPT	;X=(PFLD)+(PHP/10)
	PULA			;GET VERT LINE
	STAA	X,0		;STORE INTO SCREEN
	LDAB	D,VRAMPT+1
	ADDB	I,10		;MOVE TO NEXT ROW
	STAB	D,VRAMPT+1
	BCC	50$		;NOT DONE YET
;
;OUTPUT CAR POSITION
;
	LDS	D,ISTEMP	;RESTORE SP
	LDAA	D,ROTOUT
	LDAB	D,DCOLOR	;OUTPUT DRONE COLOR
	ABA			;BIT 6  IS A DONT CARE
	STAA	E,CARROT	;PLAYER CAR ROTATION
	LDAA	D,ROTOUT+1
	ASLB			;OUTPUT OTHER BIT OF DRONE COLOR
	ABA
	STAA	E,DROT		;DRONE CAR ROTATION
	LDAA	D,DRONEH
	STAA	E,DHPOS		;DRONE H POSITION
	LDAA	D,DRONEV
	STAA	E,DVPOS		;DRONE V POSITION
	LDAA	D,SVOUT
	STAA	E,PVP		;SCREEN VERT POS'N
	LDAA	D,SHOUT
	STAA	E,PHP		;SCREEN HORIZ POS'N
	LDAB	D,VISAVE
	LDAA	D,CRSCNT
	BNE	60$
	LDAA	D,MODE
	ANDA	I,4
	BEQ	60$
	ORAB	I,80
60$:	LDAA	D,$LMTIM	;ABUSE NOISE
	BEQ	65$
	ANDB	I,0EF
65$:	STAB	E,VIDINV
;
;READ INPUTS FOR CRASH AND SQUISH
;
	LDAA	D,STAT
	LDAB	E,CSQSH
	BPL	70$
	ORAA	I,8
	BRA	75$
70$:	ANDA	I,0F7
75$:	LDAB	E,CCRASH
	ANDB	I,2
	BEQ	77$
	ORAA	I,2
	BRA	80$
77$:	ANDA	I,0FD
80$:	STAA	D,STAT
	LDAA	D,STAT+1
85$:	ROR	E,DCRASH
	BCC	87$
	ORAA	I,2
	BRA	90$
87$:	ANDA	I,0FD
90$:	STAA	D,STAT+1
	STAA	E,CCRST
	STAA	E,DCRST
	INC	E,FRAME		;COUNT FRAMES
	RTI
	.PAGE
	.SBTTL	 TABLES
RATIO:	.BYTE 7,6,5,4
	
	.LIST MEB
	.NLIST BYT
	.MACRO VHTAB Q,R,S,T,U,V,W
	.IRP X,<Q,R,S,T,U,V,W>
	.IF NB,X
	.BYTE X*2&0FF
	.ENDC
	.ENDR
	.ENDM
	
VOFF:	VHTAB	-7,-7,-6,-5,-3,-2
HOFF:	VHTAB 	0,2,3,5,6,7
	VHTAB	7,7,6,5,3,2
	VHTAB	0,-2,-3,-5,-6,-7
	VHTAB	-7,-7,-6,-5,-3,-2
	
	.MACRO ATAB A,B,C,D
	.WORD A*1000+<B*100&0FFF+<C*10+<D&0F>&0FF>>
	.ENDM
	
ACTAB:	ATAB	7,1,1,1		;0-1
	ATAB	7,2,1,1		;2-3
	ATAB	7,2,1,1		;4
	ATAB	7,3,1,1		;6
	ATAB	5,3,2,1		;8
	ATAB	3,4,2,1		;10
	ATAB	1,5,2,1		;12
	ATAB	0,4,2,1		;14
	ATAB	-1,3,3,1	;16
	ATAB	-2,1,4,1	;18
	ATAB	-3,0,4,1	;20
	ATAB	-4,-1,2,2	;22
	ATAB	-5,-2,1,3	;24
	ATAB	-7,-5,0,3	;26
	ATAB	-7,-6,-1,2	;28
	ATAB	-7,-6,-2,1	;30
DACTAB:	ATAB	-1,-1,-1,-1		;0-1
	ATAB	-2,-1,-1,-1	;2-3
	ATAB	-4,-1,-1,-1	;4-5
	ATAB	-6,-2,-1,-1	;6
	ATAB	-7,-2,-1,-1	;8
	ATAB	-7,-3,-2,-1	;10
	ATAB	-7,-3,-2,-1	;12
	ATAB	-7,-4,-2,-1	;14
	ATAB	-7,-4,-2,-1	;16
	ATAB	-7,-5,-3,-1	;18
	ATAB	-7,-5,-3,-2	;20
	ATAB	-7,-6,-4,-2	;22
	ATAB	-7,-6,-5,-2	;24
	ATAB	-7,-7,-5,-3	;26
	ATAB	-7,-7,-6,-4	;28
	ATAB	-7,-7,-6,-5	;30
TMETBL:	.BYTE	28,3C,50,64
XPLTBL:
	.BYTE	5,10,17,26,34,43	;TRACK	1
	.BYTE	4,8,12,17,23,29		;	2
	.BYTE	5,10,17,26,34,43	;	3
	.BYTE	6,12,18,27,36,45	;	4
	.BYTE	6,12,17,25,34,42	;	5
	.BYTE	6,12,18,27,36,45	;	6
	.BYTE	4,8,13,20,26,33		;	7
	.BYTE	5,10,17,26,34,43	;	8
	.NLIST MEB
MESS:
;ENGLISH
	.ASCIN	/@@@@@@@@@@@@@@@@/	;0,1
	.ASCIN	/@@@@@SORRY@@@@@@/	;2
	.ASCIN	/@@@@SO@SO@@@@@@@/	;4
	.ASCIN	/@@@@@GOOD@@@@@@@/	;6
	.ASCIN	/@@@@@ACE@@@@@@@@/	;8
	.ASCIN	/@@FUEL@@/		;A
	.ASCIN	/@SCORE@@/		;B
	.ASCIN	/@BONUS@FOR@@@@0@/	;C
	.ASCIN	/@TOP@SCORE@@@@0@/	;E
	.ASCIN	/@@PRESS@START@@@/	;10
	.ASCIN	/@SELECT@TRACK@@@/	;12
	.ASCIN	/@TRACK@@/		;14
	.ASCIN	/@SPEED@@/		;15
	.ASCIN	/@@INSERT@COINS@@/	;16
TRKNAMES:
	.ASCIN	/@@EASY@@/		;18
	.ASCIN	/@@MED.@@/		;19
	.ASCIN	/@@HARD@@/		;1A
;FRENCH
	.ASCIN	/@@@@@DESOLE@@@@@/	;2
	.ASCIN	/@@@PASSABLE@@@@@/	;4
	.ASCIN	/@@@@@BIEN@@@@@@@/	;6
	.ASCIN	/@@@@@AS@@@@@@@@@/	;8
	.ASCIN	/@ESSENCE/		;A
	.ASCIN	/@SCORE@@/		;B
	.ASCIN	/@BONUS@POUR@@@0@/	;C
	.ASCIN	/@SCORE@MAX.@@@0@/	;E
	.ASCIN	/@APPUYER@START@@/	;10
	.ASCIN	/@SELECTION@PISTE/	;12
	.ASCIN	/@PISTE@@/		;14
	.ASCIN	/@@KPH@@@/		;15
	.ASCIN	/@INSERER@PIECES@/	;16
;SPANISH
	.ASCIN	/@@@LO@SIENTO@@@@/	;2
	.ASCIN	/@@@@REGULAR@@@@@/	;4
	.ASCIN	/@@@@@BUENO@@@@@@/	;6
	.ASCIN	/@@@@@@AS@@@@@@@@/	;8
	.ASCIN	/@PETROL@/		;A
	.ASCIN	/PUNTAJE/		;B
	.BYTE	0
	.ASCIN	/@BONOS@POR@@@@0@/	;C
	.ASCIN	/@MAX.SCORE@@@@0@/	;E
	.ASCIN	/@@PULSAR@START@@/	;10
	.ASCIN	/@@ESCOGE@CARRIL@/	;12
	.ASCIN	/CARRIL@@/		;14
	.ASCIN	/@@KPH@@@/		;15
	.ASCIN	/@INSERTE@FICHAS@/	;16
;GERMAN
	.ASCIN	/@@@@BEDAURE@@@@@/	;2
	.ASCIN	/@@@@@SO@@SO@@@@@/	;4
	.ASCIN	/@@@@@@GUT@@@@@@@/	;6
	.ASCIN	/@@@@@@AS@@@@@@@@/	;8
	.ASCIN	/@PETROL@/		;A
	.ASCIN	/TREFFER/		;B
	.BYTE	0			;FUDGE
	.ASCIN	/@BONUS@FUR@@@@0@/	;C
	.ASCIN	/@TOP@TREFFER@@0@/	;E
	.ASCIN	/@DRUECKE@START@@/	;10
	.ASCIN	/@@BAHN@W!HLEN@@@/	;12 ! IS AN A WITH AN UMLAUT
	.ASCIN	/@BAHN@@@/		;14
	.ASCIN	/@@KPH@@@/		;15
	.ASCIN	/@GELD@EINWERFEN@/	;16
	.END


                                                                                                                                                            