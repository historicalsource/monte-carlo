	.TITLE MO2TST:MONTE CARLO SELF-TEST
	OPT=1
	.RADIX	16
	.CSECT
	.LIST	MEB
	.IIF NDF,OPT,OPT=2
	.MACRO .WAIT
	.IF EQ,OPT-1
	SWI
	.IFF
	JMP WAIT
	.ENDC
	.ENDM
	.GLOBL TEST,TSTRTN,PWRON,IRQ,NMI
	.GLOBL STEPSW,WTCHDG,PLYFLD,AN,ROM1,ROTTAB
	.GLOBL TEMP,TSTCNT,TRKLED,STEPDB,XTEMP
	.GLOBL CRSSND,SKDRST,SWITCH,OPTS
	.GLOBL PVP,PHP,CARROT,DHPOS,DCOLOR
	.GLOBL DVPOS,DROT,MSND1,SKDSND
	.GLOBL VBLANK,TESTSW,DIHOLD
	.GLOBL VISAVE,VIDINV,ATTRCT
	.GLOBL RAMCV,RAMCHK,ATSTART
	.GLOBL MAINLP,ISTEMP,COIN68
	.GLOBL $CCTIM,ATSAVE,EMCNTRS
	.PAGE
	.SBTTL	POWER ON RESET
	.REPT	0
*************************
*
*	POWER-ON
*
*************************

DESCRIPTION:	POWER ON RESET
		CLEAR ALL MEMORY, SET STACK POINTER,
		LOOK FOR SELF-TEST SWITCH



REGISTERS:
	IN:

	OUT:	SP=FF


STACK USE:	STACK INITIATED TO FF





BASE PAGE USE:	ALL BASE PAGE ZEROED




	.ENDR
PWRON:
	SEI
	LDS	I,0FF
	LDX	I,RAMCV
	STX	D,RAMCHK
	TSX			;X=100
10$:	CLR	X,0		;CLEAR MEMORY
	DEX
	BNE	10$
	ROL	E,TESTSW	;LOOK FOR TEST SWITCH
	BCS	30$
	LDX	I,RAMCV
	STX	D,RAMCHK	;GET RAM VERTICATION
	LDAA	I,3		;TURN LEDS OFF
	STAA	D,ATSAVE
	JSR	ATSTART
	JMP	E,MAINLP
30$:	JMP	E,TEST



	.PAGE
	.SBTTL	IRQ
	.REPT	0
*************************
*
*	IRQ
*
*************************

DESCRIPTION:	IRQ IS 4 TIMES PER FRAME
		TAKES CARE OF COINS

STACK USE:	ALL REGS SAVED





BASE PAGE USE:	MODIFY:	ISTEMP
		READ:	COIN VARIABLES




	.ENDR
IRQ:	STS	D,ISTEMP	;TESTSP
	TST	E,ISTEMP	;ON ZERO PAGE
	BEQ	10$		;YES, CONTINUE
	RTI			;NO, RETURN TO SELF TEST
10$:

15$:	JSR	COIN68		;COINS
	LDX	I,3
	CLRA
20$:	LDAB	X,$CCTIM-1
	ASLB
	RORA
	DEX
	BNE	20$
	LDAB	D,ATSAVE
	ANDB	I,1F
	ABA
	CMPA	I,87
	BHI	30$
	STAA	E,EMCNTRS
30$:	RTI
	.PAGE
	.SBTTL SELF-TEST
TEST:	SEI
	LDAA	I,3		;TURN NOISE OFF AND LEDS OFF
	STAA	E,ATTRCT
	LDAA	I,10		;STND VID, NO SOUND
	STAA	E,VIDINV
	STAA	E,SKDRST
	LDAA	I,0FF
	STAA	E,MSND1
	STAA	E,CRSSND
;RAM TEST
	CLRB			;COUNTER
	LDX	I,100		;SET UP FOR ZERO PAGE
RAMTST:	TXS
	CLC
	LDAA	X,-1		;MUST ORIGINALLY
	BNE	BADRAM		;BE 0
	LDAA	I,1		;LOAD A WITH PATTERN
20$:	PSHA			;PUSH PATTERN ON STACK
	EORA	X,-1		;CHECK IF OK
	BNE	BADRAM		;NOT OK, SO TELL
	PULA			;RESET SP AND A
	ROLA			;CHANGE PATTERN
	BCC	20$		;CONTINUE WITH SHIFTING 1
	LDAA	I,0FE		;NOW DO A MMOVING 0
40$:	PSHA			;SIMILAR TO ABOVE
	EORA	X,-1
	BNE	BADRAM
	PULA
	ROLA
	BCS	40$
	STAA	X,-1
	DEX
	STAA	E,WTCHDG	
	DECB			;DONE?
	BNE	RAMTST		;NO
				;YES
	TSX			;SP+1=X
	DEX
	BNE	60$		;NO, PLAYFIELD OR RAM2
	LDS	I,10		;YES, THEN SAY "RAM1OK"
	LDX	I,RAM1OK+7
	BRA	RAMOK
60$:	LDS	I,19		;SAY "RAM2OK"
	LDX	I,RAM2OK+0A

RAMOK:	LDAB	I,8		;8 CHARACTER MESSAGE
10$:	LDAA	X,0		;DISPLAY IT
	PSHA
	DEX
	DECB
	BNE	10$		
	CPX	I,RAM2OK+2	;"RAM2OK"?
	BEQ	ROMTST		;YES. THEN CHECK ROMS
	LDX	I,800		;NO, DO PLAYFIELD TEST
	CLRA
	CLRB
20$:	STAA	X,0
	INX
	DECB
	BNE	20$
	LDX	I,900
	BRA	RAMTST

	
;IF THE RAM IS BAD, OUTPUT THE OFFENDING PATTERN IN A SERIES OF SOUNDS:
;SKID=0, CRASH=1
;
BADRAM:	TAB
	CPX	I,800		;BAD PLAYFIELD?
	BPL	SHOWIT		;YES, THEN DISPLAY
				;NO, ZERO PAGE
				;USE SOUNDS
3$:	CLRA
	DECA
5$:	LDX	I,07FFF		;TIMER
10$:
	STAA	E,WTCHDG
	DEX
	BNE	10$
	INCA
	BITA	I,1
	BEQ	20$
	STAA	E,SKDRST	;TURN SOUNDS OFF
	LDX	I,0F0F0
	STX	E,CRSSND
	LDX	I,0707		;TURN LEDS OFF
	STX	E,ATTRCT
	BRA	5$
20$:	RORB
	BITA	I,10
	BNE	3$		;START PROCEDURE AGAIN
	BCC	25$
	CLR	E,CRSSND	;1 IN BIT, CRASH ON
	SEC			;SET SINCE A CLR RESETS THE CARRY
	LDX	I,0505	
	STX	E,ATTRCT
	BRA	5$
25$:	STAA	E,SKDSND	;0 IN BIT, SKID ON
	LDX	I,0606
	STX	E,ATTRCT
	BRA	5$
SHOWIT:	ANDA	I,0F0
	BEQ	20$
	LDAA	I,8		;"H" FOR HI NIBBLE BAD
	STAA	D,AN+1B
20$:	ANDB	I,0F
	BEQ	40$
	LDAA	I,0C		;"L" FOR LO NIBBLE BAD
	STAA	D,AN+1C
40$:	LDAB	I,8
	LDS	I,19
	LDX	I,RAM2OK+7
60$:	LDAA	X,0
	PSHA
	DEX
	DECB
	BNE	60$
;ROM TEST
ROMTST:	LDS	I,ROM1-1
	LDX	I,1		;ROM COUNTER
10$:	LDAA	I,-4		;1K=400, -400=COUNT
	STAA	D,TEMP
	CLRA
	STAA	D,TEMP+1
20$:	PULB
	ABA			;SUM
	STAA	E,WTCHDG	;PULSE DOG
	INC	E,TEMP+1
	BNE	20$
	INC	E,TEMP
	BNE	20$		;DONE? NO
	STX	D,TEMP
	LDAB	I,0		;LDAB I,CKSUM/400
	.=.-1
	.WORD	CHKSM
	.=.-1
	STAB	D,TEMP
	LDX	D,TEMP
	ADDA	X,0		;ADDA X,CHKSM&0FF
	.=.-1
	.DSABL	M68
	.WORD	CHKSM-1
	.=.-1
	.ENABL	M68
	CLR	E,TEMP
	LDX	D,TEMP
	SUBA	I,0AA		;SUM=AA?
	BEQ	40$		;YES, OK
	LDAA	D,TEMP+1
40$:	STAA	X,AN+31
	INX			;DONE?
	CPX	I,9		;8K+1
	BNE	10$		;NO, CHECK NEXT 1K BLOCK
	DEX
	CLRA			;YES
50$:	LDAB	X,AN+31		;THEN CHECK FOR ERRORS
	ABA
	DEX
	BNE	50$
	LDAB	I,7		;MESSAGE LENGTH
	LDS	I,30		;MESS LOCATION
	LDX	I,ROMMES+6	;START WITH "BAD ROM"
	TSTA			;NOT 0 IS BAD
	BNE	70$
	LDX 	I,ROMMES+9
70$:	LDAA	X,0		;DISPLAY ROM MESSAGE
	PSHA
	DEX
	DECB
	BNE	70$
;
;SET-UP FOR DIAGNOSTICS
;
DIAGS:	LDS	I,1FF
	LDX	I,TSTTBL		;SET UP INDEX FOR JUMP TABLE
	.=.-1			;TSTTBL&0FF00
	.BYTE	0
	STX	D,TSTCNT
	STAA	E,WTCHDG	;PULSE DOG
	LDX	I,800			;RAINBOW ON PLYFLD
	CLRA
	STAA	D,DCOLOR
20$:	STAA	X,0
	INX
	INCA
	BNE	20$
;
;LAMPS ON
T0:	LDAA	I,3		;ATTRACT ON(DISALLOW SOUNDS) AND LEDS OFF
	STAA	E,TRKLED
	LDAA	I,0FF
	STAA	E,SKDRST	;SKID OFF
	LDAA	I,10
	STAA	E,VIDINV	;EXTENDED PLAY,VIDEO INVERT,DRONE MOTOR OFF
;DISPLAY OPTION SWITCHES
;8 SWITCH DIP FIRST
	CLRA
	LDX	I,OPTS+3	;READ
40$:	ASLA
	LDAB	X,0
	ANDB	I,3
	LSRB
	BCC	50$
	ORAB	I,10
50$:	ABA
	DEX
	CPX	I,OPTS-1
	BNE	40$
	LDX	I,8		;DISPLAY
60$:	ASLA
	LDAB	I,31		;"1" FOR ON
	BCC	70$
	LDAB	I,30		;"0" FOR OFF
70$:	STAB	X,0
	DEX
	BNE	60$
;NOW THE 4 SWITCH DIP
	LDAA	E,OPTS
	ANDA	I,3C
	LSRA
	LSRA
	LDX	I,24
80$:	LSRA
	LDAB	I,31
	BCC	90$
	LDAB	I,30
90$:	STAB	X,0
	DEX
	CPX	I,20
	BNE	80$
;
;SWITCH TEST - EXOR BITS 6 & 7
;
	CLRA
	LDAB	D,TEMP+1
	LDX	I,SWITCH+6	;TOP OF SWITCHES
21$:	EORA	X,0
	DEX
	CPX	I,SWITCH-1
	BNE	21$
	ASLA			;V=BIT 7 EOR BIT 6 FROM BEFORE SHIFT
	BVC	22$
	COMA			;IF V=1, COMPLEMENT BIT 0
22$:	LSRA			;RETURN A
	ABA			;ADD B IN
	LSRA
	BCC	23$		;IF C=0, THEN A=B
	COMB			;SWAP B
	LDAA	I,4		;TURN NOISE ON
	STAA	E,ATTRCT
	STAA	E,SKDSND	;SKDSND ON
23$:	ANDB	I,1
	STAB	D,TEMP+1
	NEGA			;A=1
	.WAIT
;
;SCREEN MOTION VERTICAL - STEP A
;
T1:				;BUMP COUNTER
	STAB	E,PVP		;OUTPUT
	.WAIT
;
;SCREEN MOTION HORIZONTAL - STEP B
;
T2:				;BUMP COUNTER
	STAB	E,PHP		;OUTPUT
	.WAIT
	SWI
;
;CAR ROTATION-STEP C
;
T3:				;BUMP ROTATION
	JSR	ROT
	STAA	E,CARROT
	LDAA	I,1F		;WAIT 1F FRAMES
	.WAIT
;
;TAIL MOTION HORIZONTAL - STEP D
;
T4:				;BUMP COUNTER
	STAB	E,DHPOS		;STORE TO SCREEN
	CLR	E,DROT		;A VALID ROTATION
	.WAIT
;
;TAIL MOTION VERTICAL - STEP E
;
T5:				;BUMP COUNTER
	STAB	E,DVPOS		;STORE TO SCREEN
	LDAA	I,40
	STAA	E,DHPOS
	CLRA			;DON'T WAIT
	.WAIT
;
;TAIL ROTATION - STEP F
;
T6:				;BUMP COUNTER
				;SAVE SINGT IT GET BLIZED
	JSR	ROT		;PROCESS INTO A PICTURE
	ADDA	D,DCOLOR	;2*DCOLOR
	ADDA	D,DCOLOR
	STAA	E,DROT
	LDAA	D,DCOLOR
	STAA	E,CARROT
	LDAA	I,1F		;WAIT 1F FRAMES
	.WAIT
;
;EXTENDED PLAY SOUND AND VIDEO INVERT - STEP G
;
T7:
	LDAA	D,VISAVE
	EORA	I,90		;TOGGLE XPSND BIT
	STAA	D,VISAVE
	STAA	E,VIDINV
	LDAA	I,0F
	.WAIT
;PLAYER MOTOR FREQ-STEP H
T8:	LDAA	I,7		;TURN LEDS AND
	STAA	E,ATTRCT	;ATTRACT OFF
	LDAA	I,10
	STAA	E,VIDINV	;DRONE OFF
	TBA
	ORAA	I,0F0		;DONR LOW FREQ
	STAA	E,MSND1
	LDAA	I,1F
	.WAIT
;
;DRONE MOTOR FREQ SOUND - STEP I
T9:	LDAA	I,1F		;MAKE DRONE LOUD
	STAA	E,VIDINV
	TBA
	ASLA
	ASLA
	ASLA
	ASLA
	ORAA	I,0F		;PLAYER ALWAYS LO FREQ
	STAA	E,MSND1
	LDAA	I,1F
	.WAIT
;
;DRONE VOLUME-STEP J
T10:	TBA
	ORAA	I,10
	ANDA	I,7F
	STAA	E,VIDINV
	LDAA	I,1F
	.WAIT
;
;SCREECH SOUND - STEP K
;
T11:
	LDAA	I,0FF		;MOTOR SLOW
	STAA	E,MSND1
	CLRA
	BITB	I,10
	BNE	1$
	STAB	E,SKDSND
	.WAIT
1$:	STAB	E,SKDRST
	.WAIT
;
;CRASH SOUND - STEP L
;
T12:
	TBA
	ASLA
	ASLA
	ASLA
	ASLA
	STAA	E,SKDRST	;SKID OFF
	STAA	E,CRSSND
	LDAA	I,7A
	STAA	D,TEMP
	LDAA	I,1F
	.WAIT
;
;CONVERGENCE PATTERN-STEP M
;
T13:	LDX	I,0303		;KILL CRASH SOUND
	STX	E,ATTRCT
	LDX	I,9090		;BLACK BACKGROUND
	STX	E,VIDINV
	LDAA	D,TEMP
	EORA	I,0C0
	STAA	D,TEMP
	CLRB
	LDX	I,800
10$:	STAA	X,0
	INX
	DECB
	BNE	10$
	CLRA
WAIT:					;BUMP COUNTER
;
;WAIT THE NUMBER OF FRAMES SPECIFIED IN A CHECK STEP SWITCH
;RETURN AT THE START OF VBLANK
;
TSTGO:	LDS	I,1FF		;THIS IS STILL MAPPED INTO THE ZERO PAGE
				;RAM, BUT NOW I CAN IDENTIFY THE TEST MODE
				;BY CHECKING THE STACK
	CLI
	STAA	E,WTCHDG	;PULSE DOG
	WAI
TSTRTN:	ROL	VBLANK		;ARE WE IN BLANKING?
	BPL	TSTGO
	CLR	PVP		;STOP SCROLLING
	LDX	I,4040		;USE X, NOT A OR B
	STX	E,DVPOS
	ROL	TESTSW		;STILL IN TEST?
	BCS	40$		;YES, GO ON
	JMP	PWRON		;RESET
;START & SLAM SWITCHES TO START DIAGS
40$:	TST	E,TSTCNT+1	;SWITCH TEST?
	BNE	50$		;NO, IN DIAGS
	PSHA			;YES, SAVE A
	LDAA	E,SWITCH	;START AND
	ANDA	E,SWITCH+1	;SLAM TOGETHER?
	PULA
	BPL	70$		;STAY IN SWITCH TEST
	CLR	E,STEPDB	;YES, GO TO DIAGNOSTICS
	BRA	55$
50$:	ROL	STEPSW
	ROL	STEPDB
	INC	E,STEPDB	;IF STEPDB WAS 01111111,THEN V=1
	BVC	60$
55$:	LDAB	D,TSTCNT+1	;BUMP COUNT
	INCB
	INCB
	STAB	D,TSTCNT+1
	CMPB	I,6		;TEST 3
	BNE	59$		;NO
	LDX	I,800		;YES, CLEAR SCREEN
57$:	CLR	X,0
	INX
	CPX	I,900		;DONE?
	BMI	57$		;NO
59$:	CLRB
60$:	DEC	E,STEPDB	;RESTORE
	DECA			;ENOUGH FRAMES?
	BPL	TSTGO
70$:	LDX	D,TSTCNT
	LDX	X,0		;LDX   X,TSTTBL&0FF
	.DSABL	M68
	.=.-1
	.WORD	TSTTBL
	.=.-1
	.ENABL	M68
	LDAA	D,TSTCNT+1	;DON'T BUMP IN SWITCH TEST
	BEQ	100$
	ASRA			;DIVIDE BY 2
	STAA	AN+28		;STORE TEST NUMBER
	ROL	DIHOLD
	BMI	100$
	INCB
100$:	CLRA
	JMP	X,0
ROT:	CMPB	I,18
	BNE	10$
	LDAB	D,DCOLOR
	ADDB	I,40
	ANDB	I,0C0
	STAB	D,DCOLOR
	CLRB
10$:	LDX	I,ROTTAB
	STX	D,XTEMP
	STAB	D,XTEMP+1
	LDX	D,XTEMP
	LDAA	X,0		;LDAA   X,ROTTAB&0FF
	.DSABL	M68
	.=.-1
	.WORD	ROTTAB
	.=.-1
	.ENABL	M68
	RTS
TSTTBL:	.WORD	T0,T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,PWRON
RAM1OK:	.ASCII	/@RAM1@OK/
RAM2OK:	.ASCII	/BAD@RAM2@OK/
ROMMES:	.ASCII	/BAD@ROM@OK/
ROTTAB:	.BYTE 0,1,2,3,4,5,6,0D,0C,0B,0A,9,8
	.BYTE 19,1A,1B,1C,1D,1E,15,14,13,12,11
;RUN CHKSUM PROGRAM
;CHECKSUMS FOR 1K BLOCKS
;0AA-CHKSUM (8 BIT RESULT) =DATA FOR CHKSM
;FOR LAST BLOCK THE CHKSUM MUST BE AN EVEN NUMBER
;USE LOCATION EVEN TO ACCOMPLISH THIS
;THE DATA = (0AA-CHKSUM)/2
EVEN:	.BYTE 0			;MAKES LAST BLOCK CHKSUM EVEN
CHKSM:	.BYTE 18,0D6,1E,0B8,9F,8A,0D0,0FB
	.NLIST	MEB
	.REPT	1C
	.BYTE 0.
	.ENDR
	.LIST	MEB
	.VCTRS	3FF8,IRQ,WAIT,NMI,PWRON
	.END
                                                                                                                                                                                                                                                                                 